
test_kounai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004270  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e0  080044e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080044e0  080044e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e0  080044e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08004558  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004558  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae41  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001999  00000000  00000000  0002aee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a70  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000998  00000000  00000000  0002d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001843a  00000000  00000000  0002dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000821a  00000000  00000000  000460c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087565  00000000  00000000  0004e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000315c  00000000  00000000  000d58bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043e8 	.word	0x080043e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080043e8 	.word	0x080043e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SW1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int SW1()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 8000274:	2140      	movs	r1, #64	; 0x40
 8000276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027a:	f001 f80b 	bl	8001294 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
}
 8000280:	4618      	mov	r0, r3
 8000282:	bd80      	pop	{r7, pc}

08000284 <motor1>:
{
return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
}

void motor1(int dire,int duty)//右モーター
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
	if(dire==0){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d116      	bne.n	80002c2 <motor1+0x3e>
		sConfigOC.Pulse = duty;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	4a27      	ldr	r2, [pc, #156]	; (8000334 <motor1+0xb0>)
 8000298:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800029a:	2200      	movs	r2, #0
 800029c:	4925      	ldr	r1, [pc, #148]	; (8000334 <motor1+0xb0>)
 800029e:	4826      	ldr	r0, [pc, #152]	; (8000338 <motor1+0xb4>)
 80002a0:	f002 fad6 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <motor1+0x2a>
		 {
		 Error_Handler();
 80002aa:	f000 fb41 	bl	8000930 <Error_Handler>
		 }
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80002ae:	2100      	movs	r1, #0
 80002b0:	4821      	ldr	r0, [pc, #132]	; (8000338 <motor1+0xb4>)
 80002b2:	f002 fa7b 	bl	80027ac <HAL_TIM_PWM_Start>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d036      	beq.n	800032a <motor1+0xa6>
				   					{
				   						Error_Handler();
 80002bc:	f000 fb38 	bl	8000930 <Error_Handler>
		 {
		 Error_Handler();
		 }
			}

}
 80002c0:	e033      	b.n	800032a <motor1+0xa6>
	else if (dire==1){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d116      	bne.n	80002f6 <motor1+0x72>
		sConfigOC.Pulse = duty;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <motor1+0xb0>)
 80002cc:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002ce:	2204      	movs	r2, #4
 80002d0:	4918      	ldr	r1, [pc, #96]	; (8000334 <motor1+0xb0>)
 80002d2:	4819      	ldr	r0, [pc, #100]	; (8000338 <motor1+0xb4>)
 80002d4:	f002 fabc 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <motor1+0x5e>
		 Error_Handler();
 80002de:	f000 fb27 	bl	8000930 <Error_Handler>
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80002e2:	2104      	movs	r1, #4
 80002e4:	4814      	ldr	r0, [pc, #80]	; (8000338 <motor1+0xb4>)
 80002e6:	f002 fa61 	bl	80027ac <HAL_TIM_PWM_Start>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d01c      	beq.n	800032a <motor1+0xa6>
			   							Error_Handler();
 80002f0:	f000 fb1e 	bl	8000930 <Error_Handler>
}
 80002f4:	e019      	b.n	800032a <motor1+0xa6>
	else if(dire==2)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d116      	bne.n	800032a <motor1+0xa6>
		sConfigOC.Pulse = 0;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <motor1+0xb0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000302:	2200      	movs	r2, #0
 8000304:	490b      	ldr	r1, [pc, #44]	; (8000334 <motor1+0xb0>)
 8000306:	480c      	ldr	r0, [pc, #48]	; (8000338 <motor1+0xb4>)
 8000308:	f002 faa2 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <motor1+0x92>
		 Error_Handler();
 8000312:	f000 fb0d 	bl	8000930 <Error_Handler>
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000316:	2200      	movs	r2, #0
 8000318:	4906      	ldr	r1, [pc, #24]	; (8000334 <motor1+0xb0>)
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <motor1+0xb4>)
 800031c:	f002 fa98 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <motor1+0xa6>
		 Error_Handler();
 8000326:	f000 fb03 	bl	8000930 <Error_Handler>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000098 	.word	0x20000098
 8000338:	200000c0 	.word	0x200000c0

0800033c <motor2>:
void motor2(int dire,int duty)//右モーター
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
	if(dire==0){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d116      	bne.n	800037a <motor2+0x3e>
		sConfigOC.Pulse = duty;
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	4a27      	ldr	r2, [pc, #156]	; (80003ec <motor2+0xb0>)
 8000350:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000352:	2200      	movs	r2, #0
 8000354:	4925      	ldr	r1, [pc, #148]	; (80003ec <motor2+0xb0>)
 8000356:	4826      	ldr	r0, [pc, #152]	; (80003f0 <motor2+0xb4>)
 8000358:	f002 fa7a 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <motor2+0x2a>
		 {
		 Error_Handler();
 8000362:	f000 fae5 	bl	8000930 <Error_Handler>
		 }
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000366:	2100      	movs	r1, #0
 8000368:	4822      	ldr	r0, [pc, #136]	; (80003f4 <motor2+0xb8>)
 800036a:	f002 fa1f 	bl	80027ac <HAL_TIM_PWM_Start>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d036      	beq.n	80003e2 <motor2+0xa6>
				   					{
				   						Error_Handler();
 8000374:	f000 fadc 	bl	8000930 <Error_Handler>
		 {
		 Error_Handler();
		 }
			}

}
 8000378:	e033      	b.n	80003e2 <motor2+0xa6>
	else if (dire==1){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d116      	bne.n	80003ae <motor2+0x72>
		sConfigOC.Pulse = duty;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <motor2+0xb0>)
 8000384:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000386:	2204      	movs	r2, #4
 8000388:	4918      	ldr	r1, [pc, #96]	; (80003ec <motor2+0xb0>)
 800038a:	4819      	ldr	r0, [pc, #100]	; (80003f0 <motor2+0xb4>)
 800038c:	f002 fa60 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <motor2+0x5e>
		 Error_Handler();
 8000396:	f000 facb 	bl	8000930 <Error_Handler>
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800039a:	2104      	movs	r1, #4
 800039c:	4815      	ldr	r0, [pc, #84]	; (80003f4 <motor2+0xb8>)
 800039e:	f002 fa05 	bl	80027ac <HAL_TIM_PWM_Start>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d01c      	beq.n	80003e2 <motor2+0xa6>
			   							Error_Handler();
 80003a8:	f000 fac2 	bl	8000930 <Error_Handler>
}
 80003ac:	e019      	b.n	80003e2 <motor2+0xa6>
	else if(dire==2)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d116      	bne.n	80003e2 <motor2+0xa6>
		sConfigOC.Pulse = 0;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <motor2+0xb0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ba:	2200      	movs	r2, #0
 80003bc:	490b      	ldr	r1, [pc, #44]	; (80003ec <motor2+0xb0>)
 80003be:	480c      	ldr	r0, [pc, #48]	; (80003f0 <motor2+0xb4>)
 80003c0:	f002 fa46 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <motor2+0x92>
		 Error_Handler();
 80003ca:	f000 fab1 	bl	8000930 <Error_Handler>
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ce:	2200      	movs	r2, #0
 80003d0:	4906      	ldr	r1, [pc, #24]	; (80003ec <motor2+0xb0>)
 80003d2:	4807      	ldr	r0, [pc, #28]	; (80003f0 <motor2+0xb4>)
 80003d4:	f002 fa3c 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <motor2+0xa6>
		 Error_Handler();
 80003de:	f000 faa7 	bl	8000930 <Error_Handler>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000098 	.word	0x20000098
 80003f0:	20000100 	.word	0x20000100
 80003f4:	200000c0 	.word	0x200000c0

080003f8 <motor3>:
void motor3(int dire,int duty)//右モーター
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	sConfigOC.Pulse = duty;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	4a28      	ldr	r2, [pc, #160]	; (80004a8 <motor3+0xb0>)
 8000406:	6053      	str	r3, [r2, #4]
	if(dire==0){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d113      	bne.n	8000436 <motor3+0x3e>
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800040e:	2208      	movs	r2, #8
 8000410:	4925      	ldr	r1, [pc, #148]	; (80004a8 <motor3+0xb0>)
 8000412:	4826      	ldr	r0, [pc, #152]	; (80004ac <motor3+0xb4>)
 8000414:	f002 fa1c 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <motor3+0x2a>
		 {
		 Error_Handler();
 800041e:	f000 fa87 	bl	8000930 <Error_Handler>
		 }
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8000422:	2108      	movs	r1, #8
 8000424:	4821      	ldr	r0, [pc, #132]	; (80004ac <motor3+0xb4>)
 8000426:	f002 f9c1 	bl	80027ac <HAL_TIM_PWM_Start>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d036      	beq.n	800049e <motor3+0xa6>
				   					{
				   						Error_Handler();
 8000430:	f000 fa7e 	bl	8000930 <Error_Handler>
		 {
		 Error_Handler();
		 }
			}

}
 8000434:	e033      	b.n	800049e <motor3+0xa6>
	else if (dire==1){
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d116      	bne.n	800046a <motor3+0x72>
		sConfigOC.Pulse = duty;
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <motor3+0xb0>)
 8000440:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000442:	220c      	movs	r2, #12
 8000444:	4918      	ldr	r1, [pc, #96]	; (80004a8 <motor3+0xb0>)
 8000446:	4819      	ldr	r0, [pc, #100]	; (80004ac <motor3+0xb4>)
 8000448:	f002 fa02 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <motor3+0x5e>
		 Error_Handler();
 8000452:	f000 fa6d 	bl	8000930 <Error_Handler>
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8000456:	210c      	movs	r1, #12
 8000458:	4814      	ldr	r0, [pc, #80]	; (80004ac <motor3+0xb4>)
 800045a:	f002 f9a7 	bl	80027ac <HAL_TIM_PWM_Start>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d01c      	beq.n	800049e <motor3+0xa6>
			   							Error_Handler();
 8000464:	f000 fa64 	bl	8000930 <Error_Handler>
}
 8000468:	e019      	b.n	800049e <motor3+0xa6>
	else if(dire==2)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d116      	bne.n	800049e <motor3+0xa6>
		sConfigOC.Pulse = 0;
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <motor3+0xb0>)
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000476:	2208      	movs	r2, #8
 8000478:	490b      	ldr	r1, [pc, #44]	; (80004a8 <motor3+0xb0>)
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <motor3+0xb4>)
 800047c:	f002 f9e8 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <motor3+0x92>
		 Error_Handler();
 8000486:	f000 fa53 	bl	8000930 <Error_Handler>
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800048a:	220c      	movs	r2, #12
 800048c:	4906      	ldr	r1, [pc, #24]	; (80004a8 <motor3+0xb0>)
 800048e:	4807      	ldr	r0, [pc, #28]	; (80004ac <motor3+0xb4>)
 8000490:	f002 f9de 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <motor3+0xa6>
		 Error_Handler();
 800049a:	f000 fa49 	bl	8000930 <Error_Handler>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000098 	.word	0x20000098
 80004ac:	200000c0 	.word	0x200000c0

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fc0d 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f83f 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f9e5 	bl	800088c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004c2:	f000 f893 	bl	80005ec <MX_TIM1_Init>
  MX_TIM2_Init();
 80004c6:	f000 f95f 	bl	8000788 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
int A=0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
	}
	 HAL_Delay(1000);
*/
	 //motor1の挙動 ???��?��??��?��?右

	  A=SW1();
 80004ce:	f7ff fecf 	bl	8000270 <SW1>
 80004d2:	6078      	str	r0, [r7, #4]

	  switch(A){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d016      	beq.n	8000508 <main+0x58>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d126      	bne.n	800052c <main+0x7c>

	  case 1:
 		  printf("sw1_ok \n\r");
 80004de:	4815      	ldr	r0, [pc, #84]	; (8000534 <main+0x84>)
 80004e0:	f003 f89e 	bl	8003620 <iprintf>
 		  motor1(1,999);
 80004e4:	f240 31e7 	movw	r1, #999	; 0x3e7
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff fecb 	bl	8000284 <motor1>
	 	  motor2(1,999);
 80004ee:	f240 31e7 	movw	r1, #999	; 0x3e7
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff ff22 	bl	800033c <motor2>
	 	  motor3(1,999);
 80004f8:	f240 31e7 	movw	r1, #999	; 0x3e7
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ff7b 	bl	80003f8 <motor3>
	 	  A=3;
 8000502:	2303      	movs	r3, #3
 8000504:	607b      	str	r3, [r7, #4]
	 	  break;
 8000506:	e011      	b.n	800052c <main+0x7c>

	  case 0:
		  printf("no_motor \n\r");
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x88>)
 800050a:	f003 f889 	bl	8003620 <iprintf>
	 	  motor1(2,0);
 800050e:	2100      	movs	r1, #0
 8000510:	2002      	movs	r0, #2
 8000512:	f7ff feb7 	bl	8000284 <motor1>
	 	  motor2(2,0);
 8000516:	2100      	movs	r1, #0
 8000518:	2002      	movs	r0, #2
 800051a:	f7ff ff0f 	bl	800033c <motor2>
	 	  motor3(2,0);
 800051e:	2100      	movs	r1, #0
 8000520:	2002      	movs	r0, #2
 8000522:	f7ff ff69 	bl	80003f8 <motor3>
	 	  A=3;
 8000526:	2303      	movs	r3, #3
 8000528:	607b      	str	r3, [r7, #4]
		  break;
 800052a:	bf00      	nop
	 	  	  }
	 	  	   else{
	 	  		   motor2(2,0);
	 	  	   }
*/
	 	  HAL_Delay(10);
 800052c:	200a      	movs	r0, #10
 800052e:	f000 fc37 	bl	8000da0 <HAL_Delay>
	  A=SW1();
 8000532:	e7cc      	b.n	80004ce <main+0x1e>
 8000534:	08004400 	.word	0x08004400
 8000538:	0800440c 	.word	0x0800440c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	; 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f860 	bl	8003610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000584:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fe98 	bl	80012c4 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800059a:	f000 f9c9 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fd8b 	bl	80020d4 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c4:	f000 f9b4 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff63 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005e0:	f000 f9a6 	bl	8000930 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	; 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	222c      	movs	r2, #44	; 0x2c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f802 	bl	8003610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060c:	4b5a      	ldr	r3, [pc, #360]	; (8000778 <MX_TIM1_Init+0x18c>)
 800060e:	4a5b      	ldr	r2, [pc, #364]	; (800077c <MX_TIM1_Init+0x190>)
 8000610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000612:	4b59      	ldr	r3, [pc, #356]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000614:	2210      	movs	r2, #16
 8000616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b57      	ldr	r3, [pc, #348]	; (8000778 <MX_TIM1_Init+0x18c>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800061e:	4b56      	ldr	r3, [pc, #344]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b54      	ldr	r3, [pc, #336]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062c:	4b52      	ldr	r3, [pc, #328]	; (8000778 <MX_TIM1_Init+0x18c>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000632:	4b51      	ldr	r3, [pc, #324]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000638:	484f      	ldr	r0, [pc, #316]	; (8000778 <MX_TIM1_Init+0x18c>)
 800063a:	f002 f857 	bl	80026ec <HAL_TIM_Base_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000644:	f000 f974 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800064e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000652:	4619      	mov	r1, r3
 8000654:	4848      	ldr	r0, [pc, #288]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000656:	f002 fa13 	bl	8002a80 <HAL_TIM_ConfigClockSource>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000660:	f000 f966 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000664:	4844      	ldr	r0, [pc, #272]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000666:	f002 f86c 	bl	8002742 <HAL_TIM_PWM_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000670:	f000 f95e 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <MX_TIM1_Init+0x194>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800067a:	4b41      	ldr	r3, [pc, #260]	; (8000780 <MX_TIM1_Init+0x194>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	4b3f      	ldr	r3, [pc, #252]	; (8000780 <MX_TIM1_Init+0x194>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000686:	493e      	ldr	r1, [pc, #248]	; (8000780 <MX_TIM1_Init+0x194>)
 8000688:	483b      	ldr	r0, [pc, #236]	; (8000778 <MX_TIM1_Init+0x18c>)
 800068a:	f002 fe91 	bl	80033b0 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000694:	f000 f94c 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000698:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <MX_TIM1_Init+0x198>)
 800069a:	2260      	movs	r2, #96	; 0x60
 800069c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800069e:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_TIM1_Init+0x198>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <MX_TIM1_Init+0x198>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <MX_TIM1_Init+0x198>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <MX_TIM1_Init+0x198>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_TIM1_Init+0x198>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <MX_TIM1_Init+0x198>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c2:	2200      	movs	r2, #0
 80006c4:	492f      	ldr	r1, [pc, #188]	; (8000784 <MX_TIM1_Init+0x198>)
 80006c6:	482c      	ldr	r0, [pc, #176]	; (8000778 <MX_TIM1_Init+0x18c>)
 80006c8:	f002 f8c2 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80006d2:	f000 f92d 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006d6:	2204      	movs	r2, #4
 80006d8:	492a      	ldr	r1, [pc, #168]	; (8000784 <MX_TIM1_Init+0x198>)
 80006da:	4827      	ldr	r0, [pc, #156]	; (8000778 <MX_TIM1_Init+0x18c>)
 80006dc:	f002 f8b8 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006e6:	f000 f923 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ea:	2208      	movs	r2, #8
 80006ec:	4925      	ldr	r1, [pc, #148]	; (8000784 <MX_TIM1_Init+0x198>)
 80006ee:	4822      	ldr	r0, [pc, #136]	; (8000778 <MX_TIM1_Init+0x18c>)
 80006f0:	f002 f8ae 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80006fa:	f000 f919 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006fe:	220c      	movs	r2, #12
 8000700:	4920      	ldr	r1, [pc, #128]	; (8000784 <MX_TIM1_Init+0x198>)
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000704:	f002 f8a4 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800070e:	f000 f90f 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim1, TIM_TIM1_ADC1_NONE) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_TIM1_Init+0x18c>)
 8000716:	f002 ff31 	bl	800357c <HAL_TIMEx_RemapConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000720:	f000 f906 	bl	8000930 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <MX_TIM1_Init+0x18c>)
 800075a:	f002 fe97 	bl	800348c <HAL_TIMEx_ConfigBreakDeadTime>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8000764:	f000 f8e4 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <MX_TIM1_Init+0x18c>)
 800076a:	f000 f93f 	bl	80009ec <HAL_TIM_MspPostInit>

}
 800076e:	bf00      	nop
 8000770:	3740      	adds	r7, #64	; 0x40
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000c0 	.word	0x200000c0
 800077c:	40012c00 	.word	0x40012c00
 8000780:	2000008c 	.word	0x2000008c
 8000784:	20000098 	.word	0x20000098

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <MX_TIM2_Init+0x100>)
 80007bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MX_TIM2_Init+0x100>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <MX_TIM2_Init+0x100>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_TIM2_Init+0x100>)
 80007d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_TIM2_Init+0x100>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_TIM2_Init+0x100>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e2:	4829      	ldr	r0, [pc, #164]	; (8000888 <MX_TIM2_Init+0x100>)
 80007e4:	f001 ff82 	bl	80026ec <HAL_TIM_Base_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f89f 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4822      	ldr	r0, [pc, #136]	; (8000888 <MX_TIM2_Init+0x100>)
 8000800:	f002 f93e 	bl	8002a80 <HAL_TIM_ConfigClockSource>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800080a:	f000 f891 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800080e:	481e      	ldr	r0, [pc, #120]	; (8000888 <MX_TIM2_Init+0x100>)
 8000810:	f001 ff97 	bl	8002742 <HAL_TIM_PWM_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 f889 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <MX_TIM2_Init+0x100>)
 800082e:	f002 fdbf 	bl	80033b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000838:	f000 f87a 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083c:	2360      	movs	r3, #96	; 0x60
 800083e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_TIM2_Init+0x100>)
 8000854:	f001 fffc 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800085e:	f000 f867 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM2_Init+0x100>)
 800086a:	f001 fff1 	bl	8002850 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000874:	f000 f85c 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM2_Init+0x100>)
 800087a:	f000 f8b7 	bl	80009ec <HAL_TIM_MspPostInit>

}
 800087e:	bf00      	nop
 8000880:	3738      	adds	r7, #56	; 0x38
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000100 	.word	0x20000100

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a20      	ldr	r2, [pc, #128]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a1a      	ldr	r2, [pc, #104]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_GPIO_Init+0x9c>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80008ea:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80008ee:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f000 fb55 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000906:	2303      	movs	r3, #3
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0xa0>)
 800091a:	f000 fb49 	bl	8000fb0 <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <HAL_TIM_Base_MspInit+0x5c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10c      	bne.n	80009b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009b2:	e010      	b.n	80009d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d10b      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_TIM_Base_MspInit+0x60>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40012c00 	.word	0x40012c00
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <HAL_TIM_MspPostInit+0xd0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d130      	bne.n	8000a70 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <HAL_TIM_MspPostInit+0xd4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a2b      	ldr	r2, [pc, #172]	; (8000ac0 <HAL_TIM_MspPostInit+0xd4>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_TIM_MspPostInit+0xd4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f000 fab3 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 faa1 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a6e:	e021      	b.n	8000ab4 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d11c      	bne.n	8000ab4 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_TIM_MspPostInit+0xd4>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_TIM_MspPostInit+0xd4>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_TIM_MspPostInit+0xd4>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a92:	2303      	movs	r3, #3
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 fa7e 	bl	8000fb0 <HAL_GPIO_Init>
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f922 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
	}

return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
	}
	return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x50>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x16>
		heap_end = &end;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <_sbrk+0x50>)
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <_sbrk+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <_sbrk+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <_sbrk+0x50>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	466a      	mov	r2, sp
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d907      	bls.n	8000c36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c26:	f002 fcc9 	bl	80035bc <__errno>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	e006      	b.n	8000c44 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <_sbrk+0x50>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <_sbrk+0x50>)
 8000c40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000b4 	.word	0x200000b4
 8000c50:	20000148 	.word	0x20000148

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SystemInit+0x28>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <SystemInit+0x28>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SystemInit+0x28>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
	ldr	r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <LoopForever+0x16>)
	cmp	r2, r3
 8000ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000caa:	f7ff ffd3 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f002 fc8b 	bl	80035c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fbfd 	bl	80004b0 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000cbc:	080044e8 	.word	0x080044e8
	ldr	r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ccc:	20000148 	.word	0x20000148

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x28>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x28>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f92f 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe26 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f939 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f90f 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000140 	.word	0x20000140

08000d88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000140 	.word	0x20000140

08000da0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_Delay+0x40>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff47 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff5c 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffb0 	bl	8000f04 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e14e      	b.n	800125e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8140 	beq.w	8001258 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x38>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b12      	cmp	r3, #18
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d00b      	beq.n	8001084 <HAL_GPIO_Init+0xd4>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001078:	2b11      	cmp	r3, #17
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b12      	cmp	r3, #18
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 809a 	beq.w	8001258 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_GPIO_Init+0x2cc>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001166:	d013      	beq.n	8001190 <HAL_GPIO_Init+0x1e0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2d4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1dc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a45      	ldr	r2, [pc, #276]	; (8001288 <HAL_GPIO_Init+0x2d8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1d8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a44      	ldr	r2, [pc, #272]	; (800128c <HAL_GPIO_Init+0x2dc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1d4>
 8001180:	2303      	movs	r3, #3
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001184:	2305      	movs	r3, #5
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001188:	2302      	movs	r3, #2
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001190:	2300      	movs	r3, #0
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a2:	4937      	ldr	r1, [pc, #220]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011d4:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011fe:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	f47f aea9 	bne.w	8000fc0 <HAL_GPIO_Init+0x10>
  }
}
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	48000c00 	.word	0x48000c00
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	f000 bef4 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 816a 	beq.w	80015c2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012ee:	4bb3      	ldr	r3, [pc, #716]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fa:	4bb0      	ldr	r3, [pc, #704]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b08      	cmp	r3, #8
 8001304:	d159      	bne.n	80013ba <HAL_RCC_OscConfig+0xf6>
 8001306:	4bad      	ldr	r3, [pc, #692]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001312:	d152      	bne.n	80013ba <HAL_RCC_OscConfig+0xf6>
 8001314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001318:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001328:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x82>
 8001340:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0xae>
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800135a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001362:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800136e:	4b93      	ldr	r3, [pc, #588]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001376:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800137a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001386:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 810c 	beq.w	80015c0 <HAL_RCC_OscConfig+0x2fc>
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 8106 	bne.w	80015c0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f000 be86 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d106      	bne.n	80013d4 <HAL_RCC_OscConfig+0x110>
 80013c6:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7c      	ldr	r2, [pc, #496]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e030      	b.n	8001436 <HAL_RCC_OscConfig+0x172>
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x134>
 80013de:	4b77      	ldr	r3, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a76      	ldr	r2, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b74      	ldr	r3, [pc, #464]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a73      	ldr	r2, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01e      	b.n	8001436 <HAL_RCC_OscConfig+0x172>
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x15a>
 8001404:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6c      	ldr	r2, [pc, #432]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 800140a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a69      	ldr	r2, [pc, #420]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x172>
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a66      	ldr	r2, [pc, #408]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b64      	ldr	r3, [pc, #400]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a63      	ldr	r2, [pc, #396]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	f023 020f 	bic.w	r2, r3, #15
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	495d      	ldr	r1, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001446:	4313      	orrs	r3, r2
 8001448:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d059      	beq.n	8001508 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc98 	bl	8000d88 <HAL_GetTick>
 8001458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff fc93 	bl	8000d88 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d902      	bls.n	8001474 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	f000 be29 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001478:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001488:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d102      	bne.n	80014a6 <HAL_RCC_OscConfig+0x1e2>
 80014a0:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x20e>
 80014a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014c2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80014da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014de:	fa92 f2a2 	rbit	r2, r2
 80014e2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80014e6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80014ea:	fab2 f282 	clz	r2, r2
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f042 0220 	orr.w	r2, r2, #32
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f002 021f 	and.w	r2, r2, #31
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ab      	beq.n	800145e <HAL_RCC_OscConfig+0x19a>
 8001506:	e05c      	b.n	80015c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fc3e 	bl	8000d88 <HAL_GetTick>
 800150c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001512:	f7ff fc39 	bl	8000d88 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d902      	bls.n	8001528 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	f000 bdcf 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800153c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d102      	bne.n	800155a <HAL_RCC_OscConfig+0x296>
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x2c2>
 800155a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800156e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001572:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001576:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_RCC_OscConfig+0x2f8>)
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800158e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001592:	fa92 f2a2 	rbit	r2, r2
 8001596:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800159a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f002 021f 	and.w	r2, r2, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ab      	bne.n	8001512 <HAL_RCC_OscConfig+0x24e>
 80015ba:	e002      	b.n	80015c2 <HAL_RCC_OscConfig+0x2fe>
 80015bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 816f 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015d2:	4bd0      	ldr	r3, [pc, #832]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015de:	4bcd      	ldr	r3, [pc, #820]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d16c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x400>
 80015ea:	4bca      	ldr	r3, [pc, #808]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d166      	bne.n	80016c4 <HAL_RCC_OscConfig+0x400>
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001608:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_RCC_OscConfig+0x362>
 8001620:	4bbc      	ldr	r3, [pc, #752]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e013      	b.n	800164e <HAL_RCC_OscConfig+0x38a>
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800163e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800164a:	4bb2      	ldr	r3, [pc, #712]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2202      	movs	r2, #2
 8001650:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001654:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001658:	fa92 f2a2 	rbit	r2, r2
 800165c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001660:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001664:	fab2 f282 	clz	r2, r2
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f002 021f 	and.w	r2, r2, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_RCC_OscConfig+0x3cc>
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d002      	beq.n	8001690 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	f000 bd1b 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	4ba0      	ldr	r3, [pc, #640]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	21f8      	movs	r1, #248	; 0xf8
 80016a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016a8:	fa91 f1a1 	rbit	r1, r1
 80016ac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80016b0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80016b4:	fab1 f181 	clz	r1, r1
 80016b8:	b2c9      	uxtb	r1, r1
 80016ba:	408b      	lsls	r3, r1
 80016bc:	4995      	ldr	r1, [pc, #596]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e0f5      	b.n	80018b0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8085 	beq.w	80017da <HAL_RCC_OscConfig+0x516>
 80016d0:	2301      	movs	r3, #1
 80016d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80016e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	2301      	movs	r3, #1
 80016fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb44 	bl	8000d88 <HAL_GetTick>
 8001700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fb3f 	bl	8000d88 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d902      	bls.n	800171c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	f000 bcd5 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800172e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0x488>
 8001746:	4b73      	ldr	r3, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	e013      	b.n	8001774 <HAL_RCC_OscConfig+0x4b0>
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001756:	fa93 f3a3 	rbit	r3, r3
 800175a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001764:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	2202      	movs	r2, #2
 8001776:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800177a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800177e:	fa92 f2a2 	rbit	r2, r2
 8001782:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001786:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800178a:	fab2 f282 	clz	r2, r2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f002 021f 	and.w	r2, r2, #31
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0af      	beq.n	8001706 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	21f8      	movs	r1, #248	; 0xf8
 80017b6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017be:	fa91 f1a1 	rbit	r1, r1
 80017c2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80017c6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80017ca:	fab1 f181 	clz	r1, r1
 80017ce:	b2c9      	uxtb	r1, r1
 80017d0:	408b      	lsls	r3, r1
 80017d2:	4950      	ldr	r1, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e06a      	b.n	80018b0 <HAL_RCC_OscConfig+0x5ec>
 80017da:	2301      	movs	r3, #1
 80017dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80017ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	461a      	mov	r2, r3
 8001802:	2300      	movs	r3, #0
 8001804:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff fabf 	bl	8000d88 <HAL_GetTick>
 800180a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff faba 	bl	8000d88 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d902      	bls.n	8001826 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	f000 bc50 	b.w	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <HAL_RCC_OscConfig+0x592>
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e013      	b.n	800187e <HAL_RCC_OscConfig+0x5ba>
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001868:	2302      	movs	r3, #2
 800186a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800186e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_RCC_OscConfig+0x650>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2202      	movs	r2, #2
 8001880:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001884:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001888:	fa92 f2a2 	rbit	r2, r2
 800188c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001890:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1af      	bne.n	8001810 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80da 	beq.w	8001a74 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d069      	beq.n	800199e <HAL_RCC_OscConfig+0x6da>
 80018ca:	2301      	movs	r3, #1
 80018cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80018dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x654>)
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	2301      	movs	r3, #1
 80018f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa48 	bl	8000d88 <HAL_GetTick>
 80018f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fc:	e00e      	b.n	800191c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fa43 	bl	8000d88 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d906      	bls.n	800191c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e3d9      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	10908120 	.word	0x10908120
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800192e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800194a:	2202      	movs	r2, #2
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800195c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4ba5      	ldr	r3, [pc, #660]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001962:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001966:	2102      	movs	r1, #2
 8001968:	6019      	str	r1, [r3, #0]
 800196a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f1a3 	rbit	r1, r3
 8001974:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001978:	6019      	str	r1, [r3, #0]
  return result;
 800197a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0b0      	beq.n	80018fe <HAL_RCC_OscConfig+0x63a>
 800199c:	e06a      	b.n	8001a74 <HAL_RCC_OscConfig+0x7b0>
 800199e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019b4:	601a      	str	r2, [r3, #0]
  return result;
 80019b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0x934>)
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff f9da 	bl	8000d88 <HAL_GetTick>
 80019d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff f9d5 	bl	8000d88 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e36b      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 80019ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a3e:	2102      	movs	r1, #2
 8001a40:	6019      	str	r1, [r3, #0]
 8001a42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f1a3 	rbit	r1, r3
 8001a4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a50:	6019      	str	r1, [r3, #0]
  return result;
 8001a52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1b2      	bne.n	80019da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8158 	beq.w	8001d34 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d112      	bne.n	8001abc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <HAL_RCC_OscConfig+0x938>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac8:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <HAL_RCC_OscConfig+0x938>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x938>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f958 	bl	8000d88 <HAL_GetTick>
 8001ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff f953 	bl	8000d88 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e2e9      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <HAL_RCC_OscConfig+0x938>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ef      	beq.n	8001ade <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x852>
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a39      	ldr	r2, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02f      	b.n	8001b76 <HAL_RCC_OscConfig+0x8b2>
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x876>
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e01d      	b.n	8001b76 <HAL_RCC_OscConfig+0x8b2>
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x89a>
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x8b2>
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d06b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff f902 	bl	8000d88 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f8fd 	bl	8000d88 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e291      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001ba2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bd0:	601a      	str	r2, [r3, #0]
  return result;
 8001bd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_OscConfig+0x93c>
 8001bec:	4b01      	ldr	r3, [pc, #4]	; (8001bf4 <HAL_RCC_OscConfig+0x930>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x958>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	10908120 	.word	0x10908120
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c04:	2202      	movs	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	4bbb      	ldr	r3, [pc, #748]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c20:	2102      	movs	r1, #2
 8001c22:	6011      	str	r1, [r2, #0]
 8001c24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	fa92 f1a2 	rbit	r1, r2
 8001c2e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c32:	6011      	str	r1, [r2, #0]
  return result;
 8001c34:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f002 021f 	and.w	r2, r2, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d099      	beq.n	8001b8a <HAL_RCC_OscConfig+0x8c6>
 8001c56:	e063      	b.n	8001d20 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff f896 	bl	8000d88 <HAL_GetTick>
 8001c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff f891 	bl	8000d88 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e225      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001c7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c96:	2202      	movs	r2, #2
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ca8:	601a      	str	r2, [r3, #0]
  return result;
 8001caa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0xa06>
 8001cc4:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	e00d      	b.n	8001ce6 <HAL_RCC_OscConfig+0xa22>
 8001cca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cce:	2202      	movs	r2, #2
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cea:	2102      	movs	r1, #2
 8001cec:	6011      	str	r1, [r2, #0]
 8001cee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	fa92 f1a2 	rbit	r1, r2
 8001cf8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cfc:	6011      	str	r1, [r2, #0]
  return result;
 8001cfe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1a0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	4a76      	ldr	r2, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 81c2 	beq.w	80020c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d40:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	f000 819c 	beq.w	8002086 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	f040 8114 	bne.w	8001f82 <HAL_RCC_OscConfig+0xcbe>
 8001d5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d72:	601a      	str	r2, [r3, #0]
  return result;
 8001d74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fffa 	bl	8000d88 <HAL_GetTick>
 8001d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d98:	e009      	b.n	8001dae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7fe fff5 	bl	8000d88 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e18b      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dc6:	601a      	str	r2, [r3, #0]
  return result;
 8001dc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0xb24>
 8001de2:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e01b      	b.n	8001e20 <HAL_RCC_OscConfig+0xb5c>
 8001de8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e28:	6011      	str	r1, [r2, #0]
 8001e2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	fa92 f1a2 	rbit	r1, r2
 8001e34:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e38:	6011      	str	r1, [r2, #0]
  return result;
 8001e3a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d19e      	bne.n	8001d9a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	4925      	ldr	r1, [pc, #148]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e90:	601a      	str	r2, [r3, #0]
  return result;
 8001e92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e96:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2301      	movs	r3, #1
 8001eac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff6b 	bl	8000d88 <HAL_GetTick>
 8001eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	e009      	b.n	8001ecc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe ff66 	bl	8000d88 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0fc      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee4:	601a      	str	r2, [r3, #0]
  return result;
 8001ee6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0xc48>
 8001f00:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <HAL_RCC_OscConfig+0xc44>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e01e      	b.n	8001f44 <HAL_RCC_OscConfig+0xc80>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0xe0c>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f4c:	6011      	str	r1, [r2, #0]
 8001f4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	fa92 f1a2 	rbit	r1, r2
 8001f58:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f5c:	6011      	str	r1, [r2, #0]
  return result;
 8001f5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d09b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xbf4>
 8001f80:	e0a0      	b.n	80020c4 <HAL_RCC_OscConfig+0xe00>
 8001f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9a:	601a      	str	r2, [r3, #0]
  return result;
 8001f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fee6 	bl	8000d88 <HAL_GetTick>
 8001fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe fee1 	bl	8000d88 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e077      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
 8001fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	601a      	str	r2, [r3, #0]
  return result;
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0xd4c>
 800200a:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_RCC_OscConfig+0xe0c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e01b      	b.n	8002048 <HAL_RCC_OscConfig+0xd84>
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_RCC_OscConfig+0xe0c>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f107 0210 	add.w	r2, r7, #16
 800204c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002050:	6011      	str	r1, [r2, #0]
 8002052:	f107 0210 	add.w	r2, r7, #16
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	fa92 f1a2 	rbit	r1, r2
 800205c:	f107 020c 	add.w	r2, r7, #12
 8002060:	6011      	str	r1, [r2, #0]
  return result;
 8002062:	f107 020c 	add.w	r2, r7, #12
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f002 021f 	and.w	r2, r2, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d19e      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xcfe>
 8002084:	e01e      	b.n	80020c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_RCC_OscConfig+0xe0c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800209c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09e      	sub	sp, #120	; 0x78
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e162      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b90      	ldr	r3, [pc, #576]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b8d      	ldr	r3, [pc, #564]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	498b      	ldr	r1, [pc, #556]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b89      	ldr	r3, [pc, #548]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e14a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	497f      	ldr	r1, [pc, #508]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80dc 	beq.w	8002300 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d13c      	bne.n	80021ca <HAL_RCC_ClockConfig+0xf6>
 8002150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002154:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d102      	bne.n	800217a <HAL_RCC_ClockConfig+0xa6>
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e00f      	b.n	800219a <HAL_RCC_ClockConfig+0xc6>
 800217a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	667b      	str	r3, [r7, #100]	; 0x64
 8002188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218c:	663b      	str	r3, [r7, #96]	; 0x60
 800218e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800219e:	65ba      	str	r2, [r7, #88]	; 0x58
 80021a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d17b      	bne.n	80022be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0f3      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d13c      	bne.n	800224c <HAL_RCC_ClockConfig+0x178>
 80021d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_ClockConfig+0x128>
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	e00f      	b.n	800221c <HAL_RCC_ClockConfig+0x148>
 80021fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002200:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
 800220a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220e:	643b      	str	r3, [r7, #64]	; 0x40
 8002210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002218:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002220:	63ba      	str	r2, [r7, #56]	; 0x38
 8002222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002224:	fa92 f2a2 	rbit	r2, r2
 8002228:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800222a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f042 0220 	orr.w	r2, r2, #32
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f002 021f 	and.w	r2, r2, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d13a      	bne.n	80022be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b2      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
 800224c:	2302      	movs	r3, #2
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_RCC_ClockConfig+0x1a0>
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e00d      	b.n	8002290 <HAL_RCC_ClockConfig+0x1bc>
 8002274:	2302      	movs	r3, #2
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2202      	movs	r2, #2
 8002292:	61ba      	str	r2, [r7, #24]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	617a      	str	r2, [r7, #20]
  return result;
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e079      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	491a      	ldr	r1, [pc, #104]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fd5a 	bl	8000d88 <HAL_GetTick>
 80022d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fd56 	bl	8000d88 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e061      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_ClockConfig+0x260>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d214      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4906      	ldr	r1, [pc, #24]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_RCC_ClockConfig+0x25c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e040      	b.n	80023b2 <HAL_RCC_ClockConfig+0x2de>
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	491a      	ldr	r1, [pc, #104]	; (80023bc <HAL_RCC_ClockConfig+0x2e8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x2e8>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4912      	ldr	r1, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x2e8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002376:	f000 f829 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800237a:	4601      	mov	r1, r0
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_RCC_ClockConfig+0x2e8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	22f0      	movs	r2, #240	; 0xf0
 8002386:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	fa92 f2a2 	rbit	r2, r2
 800238e:	60fa      	str	r2, [r7, #12]
  return result;
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	40d3      	lsrs	r3, r2
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x2ec>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	fa21 f303 	lsr.w	r3, r1, r3
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <HAL_RCC_ClockConfig+0x2f0>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCC_ClockConfig+0x2f4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fca8 	bl	8000d00 <HAL_InitTick>
  
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3778      	adds	r7, #120	; 0x78
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08004418 	.word	0x08004418
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b08b      	sub	sp, #44	; 0x2c
 80023d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d002      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x30>
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x36>
 80023fa:	e03c      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023fe:	623b      	str	r3, [r7, #32]
      break;
 8002400:	e03c      	b.n	800247c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002408:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800240c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	607a      	str	r2, [r7, #4]
  return result;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	40d3      	lsrs	r3, r2
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	220f      	movs	r2, #15
 8002430:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	fa92 f2a2 	rbit	r2, r2
 8002438:	60fa      	str	r2, [r7, #12]
  return result;
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	40d3      	lsrs	r3, r2
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	fbb2 f2f3 	udiv	r2, r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	e004      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_RCC_GetSysClockFreq+0xd0>)
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	623b      	str	r3, [r7, #32]
      break;
 8002474:	e002      	b.n	800247c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002478:	623b      	str	r3, [r7, #32]
      break;
 800247a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247c:	6a3b      	ldr	r3, [r7, #32]
}
 800247e:	4618      	mov	r0, r3
 8002480:	372c      	adds	r7, #44	; 0x2c
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	08004428 	.word	0x08004428
 8002498:	08004438 	.word	0x08004438
 800249c:	003d0900 	.word	0x003d0900

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b092      	sub	sp, #72	; 0x48
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80d0 	beq.w	800265e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c4:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10e      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	4b83      	ldr	r3, [pc, #524]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4a82      	ldr	r2, [pc, #520]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024da:	61d3      	str	r3, [r2, #28]
 80024dc:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b7a      	ldr	r3, [pc, #488]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a79      	ldr	r2, [pc, #484]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe fc3f 	bl	8000d88 <HAL_GetTick>
 800250a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fc3b 	bl	8000d88 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0db      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d07d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002546:	429a      	cmp	r2, r3
 8002548:	d076      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	2301      	movs	r3, #1
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	461a      	mov	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800259c:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d045      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fbec 	bl	8000d88 <HAL_GetTick>
 80025b0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b2:	e00a      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fbe8 	bl	8000d88 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e086      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80025ca:	2302      	movs	r3, #2
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	61fb      	str	r3, [r7, #28]
  return result;
 80025e2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d102      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	e007      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80025fe:	2302      	movs	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2202      	movs	r2, #2
 8002610:	613a      	str	r2, [r7, #16]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	fa92 f2a2 	rbit	r2, r2
 8002618:	60fa      	str	r2, [r7, #12]
  return result;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0bd      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4926      	ldr	r1, [pc, #152]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002646:	4313      	orrs	r3, r2
 8002648:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800264a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	491a      	ldr	r1, [pc, #104]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002678:	4313      	orrs	r3, r2
 800267a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f023 0210 	bic.w	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4912      	ldr	r1, [pc, #72]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002696:	4313      	orrs	r3, r2
 8002698:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3748      	adds	r7, #72	; 0x48
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	10908100 	.word	0x10908100

080026ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01d      	b.n	800273a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe f938 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fa62 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e01d      	b.n	8002790 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f815 	bl	8002798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f000 fa37 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fdd0 	bl	8003364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_TIM_PWM_Start+0x90>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_TIM_PWM_Start+0x40>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_TIM_PWM_Start+0x94>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_TIM_PWM_Start+0x40>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_TIM_PWM_Start+0x98>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_TIM_PWM_Start+0x40>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIM_PWM_Start+0x9c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_PWM_Start+0x44>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_TIM_PWM_Start+0x46>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_TIM_PWM_Start+0xa0>)
 800280e:	4013      	ands	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d00b      	beq.n	8002830 <HAL_TIM_PWM_Start+0x84>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d007      	beq.n	8002830 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40014000 	.word	0x40014000
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800
 800284c:	00010007 	.word	0x00010007

08002850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002866:	2302      	movs	r3, #2
 8002868:	e105      	b.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x226>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b14      	cmp	r3, #20
 800287e:	f200 80f0 	bhi.w	8002a62 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028dd 	.word	0x080028dd
 800288c:	08002a63 	.word	0x08002a63
 8002890:	08002a63 	.word	0x08002a63
 8002894:	08002a63 	.word	0x08002a63
 8002898:	0800291d 	.word	0x0800291d
 800289c:	08002a63 	.word	0x08002a63
 80028a0:	08002a63 	.word	0x08002a63
 80028a4:	08002a63 	.word	0x08002a63
 80028a8:	0800295f 	.word	0x0800295f
 80028ac:	08002a63 	.word	0x08002a63
 80028b0:	08002a63 	.word	0x08002a63
 80028b4:	08002a63 	.word	0x08002a63
 80028b8:	0800299f 	.word	0x0800299f
 80028bc:	08002a63 	.word	0x08002a63
 80028c0:	08002a63 	.word	0x08002a63
 80028c4:	08002a63 	.word	0x08002a63
 80028c8:	080029e1 	.word	0x080029e1
 80028cc:	08002a63 	.word	0x08002a63
 80028d0:	08002a63 	.word	0x08002a63
 80028d4:	08002a63 	.word	0x08002a63
 80028d8:	08002a21 	.word	0x08002a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f9fe 	bl	8002ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0208 	orr.w	r2, r2, #8
 80028f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6999      	ldr	r1, [r3, #24]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	619a      	str	r2, [r3, #24]
      break;
 800291a:	e0a3      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa64 	bl	8002df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	021a      	lsls	r2, r3, #8
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	619a      	str	r2, [r3, #24]
      break;
 800295c:	e082      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fac3 	bl	8002ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0208 	orr.w	r2, r2, #8
 8002978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0204 	bic.w	r2, r2, #4
 8002988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69d9      	ldr	r1, [r3, #28]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
      break;
 800299c:	e062      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fb21 	bl	8002fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	61da      	str	r2, [r3, #28]
      break;
 80029de:	e041      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fb64 	bl	80030b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0208 	orr.w	r2, r2, #8
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0204 	bic.w	r2, r2, #4
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a1e:	e021      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fba2 	bl	8003170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a60:	e000      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002a62:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop

08002a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_TIM_ConfigClockSource+0x18>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0a8      	b.n	8002bea <HAL_TIM_ConfigClockSource+0x16a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d067      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0x124>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d80b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x70>
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d073      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0x144>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d802      	bhi.n	8002ae6 <HAL_TIM_ConfigClockSource+0x66>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d06f      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ae4:	e078      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d06c      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0x144>
 8002aea:	2b30      	cmp	r3, #48	; 0x30
 8002aec:	d06a      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002aee:	e073      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002af0:	2b70      	cmp	r3, #112	; 0x70
 8002af2:	d00d      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0x90>
 8002af4:	2b70      	cmp	r3, #112	; 0x70
 8002af6:	d804      	bhi.n	8002b02 <HAL_TIM_ConfigClockSource+0x82>
 8002af8:	2b50      	cmp	r3, #80	; 0x50
 8002afa:	d033      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0xe4>
 8002afc:	2b60      	cmp	r3, #96	; 0x60
 8002afe:	d041      	beq.n	8002b84 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002b00:	e06a      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	d066      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x156>
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	d017      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002b0e:	e063      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f000 fc00 	bl	8003324 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
      break;
 8002b3c:	e04c      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f000 fbe9 	bl	8003324 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b60:	609a      	str	r2, [r3, #8]
      break;
 8002b62:	e039      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f000 fb5d 	bl	8003230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2150      	movs	r1, #80	; 0x50
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fbb6 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002b82:	e029      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f000 fb7c 	bl	800328e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2160      	movs	r1, #96	; 0x60
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fba6 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002ba2:	e019      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f000 fb3d 	bl	8003230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2140      	movs	r1, #64	; 0x40
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fb96 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002bc2:	e009      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fb8d 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e000      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a32      	ldr	r2, [pc, #200]	; (8002cd0 <TIM_Base_SetConfig+0xdc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x28>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x28>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <TIM_Base_SetConfig+0xe0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <TIM_Base_SetConfig+0xdc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <TIM_Base_SetConfig+0x6a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d00f      	beq.n	8002c5e <TIM_Base_SetConfig+0x6a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <TIM_Base_SetConfig+0xe0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <TIM_Base_SetConfig+0x6a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <TIM_Base_SetConfig+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0x6a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <TIM_Base_SetConfig+0xe8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0x6a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <TIM_Base_SetConfig+0xec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d108      	bne.n	8002c70 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <TIM_Base_SetConfig+0xdc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <TIM_Base_SetConfig+0xc0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <TIM_Base_SetConfig+0xe4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <TIM_Base_SetConfig+0xc0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <TIM_Base_SetConfig+0xe8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_Base_SetConfig+0xc0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <TIM_Base_SetConfig+0xec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d103      	bne.n	8002cbc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40012c00 	.word	0x40012c00
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800

08002ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0303 	bic.w	r3, r3, #3
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f023 0302 	bic.w	r3, r3, #2
 8002d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <TIM_OC1_SetConfig+0xfc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <TIM_OC1_SetConfig+0x78>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <TIM_OC1_SetConfig+0x100>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_OC1_SetConfig+0x78>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <TIM_OC1_SetConfig+0x104>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_OC1_SetConfig+0x78>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <TIM_OC1_SetConfig+0x108>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d10c      	bne.n	8002d76 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 0308 	bic.w	r3, r3, #8
 8002d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <TIM_OC1_SetConfig+0xfc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_OC1_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <TIM_OC1_SetConfig+0x100>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_OC1_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <TIM_OC1_SetConfig+0x104>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_OC1_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a16      	ldr	r2, [pc, #88]	; (8002dec <TIM_OC1_SetConfig+0x108>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d111      	bne.n	8002dba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	621a      	str	r2, [r3, #32]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800

08002df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f023 0210 	bic.w	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0320 	bic.w	r3, r3, #32
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <TIM_OC2_SetConfig+0xf0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10d      	bne.n	8002e70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <TIM_OC2_SetConfig+0xf0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <TIM_OC2_SetConfig+0xa0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <TIM_OC2_SetConfig+0xf4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_OC2_SetConfig+0xa0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <TIM_OC2_SetConfig+0xf8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_OC2_SetConfig+0xa0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <TIM_OC2_SetConfig+0xfc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40014400 	.word	0x40014400
 8002eec:	40014800 	.word	0x40014800

08002ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <TIM_OC3_SetConfig+0xec>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10d      	bne.n	8002f6e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <TIM_OC3_SetConfig+0xec>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_OC3_SetConfig+0x9e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <TIM_OC3_SetConfig+0xf0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_OC3_SetConfig+0x9e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <TIM_OC3_SetConfig+0xf4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_OC3_SetConfig+0x9e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <TIM_OC3_SetConfig+0xf8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800

08002fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	031b      	lsls	r3, r3, #12
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <TIM_OC4_SetConfig+0xb8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_OC4_SetConfig+0x7c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <TIM_OC4_SetConfig+0xbc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_OC4_SetConfig+0x7c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <TIM_OC4_SetConfig+0xc0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_OC4_SetConfig+0x7c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <TIM_OC4_SetConfig+0xc4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d109      	bne.n	800307c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800306e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800

080030b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a15      	ldr	r2, [pc, #84]	; (8003160 <TIM_OC5_SetConfig+0xac>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_OC5_SetConfig+0x72>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <TIM_OC5_SetConfig+0xb0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_OC5_SetConfig+0x72>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a13      	ldr	r2, [pc, #76]	; (8003168 <TIM_OC5_SetConfig+0xb4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_OC5_SetConfig+0x72>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <TIM_OC5_SetConfig+0xb8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d109      	bne.n	800313a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	621a      	str	r2, [r3, #32]
}
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	051b      	lsls	r3, r3, #20
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <TIM_OC6_SetConfig+0xb0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_OC6_SetConfig+0x74>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <TIM_OC6_SetConfig+0xb4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <TIM_OC6_SetConfig+0x74>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a14      	ldr	r2, [pc, #80]	; (8003228 <TIM_OC6_SetConfig+0xb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_OC6_SetConfig+0x74>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <TIM_OC6_SetConfig+0xbc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d109      	bne.n	80031f8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40014000 	.word	0x40014000
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800

08003230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 030a 	bic.w	r3, r3, #10
 800326c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800328e:	b480      	push	{r7}
 8003290:	b087      	sub	sp, #28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0210 	bic.w	r2, r3, #16
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 0307 	orr.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	431a      	orrs	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2201      	movs	r2, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e054      	b.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d009      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10c      	bne.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4313      	orrs	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e060      	b.n	800356a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d115      	bne.n	8003558 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40012c00 	.word	0x40012c00

0800357c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_RemapConfig+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e00c      	b.n	80035ae <HAL_TIMEx_RemapConfig+0x32>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <__errno>:
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <__errno+0x8>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	2000000c 	.word	0x2000000c

080035c8 <__libc_init_array>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	4e0d      	ldr	r6, [pc, #52]	; (8003600 <__libc_init_array+0x38>)
 80035cc:	4c0d      	ldr	r4, [pc, #52]	; (8003604 <__libc_init_array+0x3c>)
 80035ce:	1ba4      	subs	r4, r4, r6
 80035d0:	10a4      	asrs	r4, r4, #2
 80035d2:	2500      	movs	r5, #0
 80035d4:	42a5      	cmp	r5, r4
 80035d6:	d109      	bne.n	80035ec <__libc_init_array+0x24>
 80035d8:	4e0b      	ldr	r6, [pc, #44]	; (8003608 <__libc_init_array+0x40>)
 80035da:	4c0c      	ldr	r4, [pc, #48]	; (800360c <__libc_init_array+0x44>)
 80035dc:	f000 ff04 	bl	80043e8 <_init>
 80035e0:	1ba4      	subs	r4, r4, r6
 80035e2:	10a4      	asrs	r4, r4, #2
 80035e4:	2500      	movs	r5, #0
 80035e6:	42a5      	cmp	r5, r4
 80035e8:	d105      	bne.n	80035f6 <__libc_init_array+0x2e>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035f0:	4798      	blx	r3
 80035f2:	3501      	adds	r5, #1
 80035f4:	e7ee      	b.n	80035d4 <__libc_init_array+0xc>
 80035f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035fa:	4798      	blx	r3
 80035fc:	3501      	adds	r5, #1
 80035fe:	e7f2      	b.n	80035e6 <__libc_init_array+0x1e>
 8003600:	080044e0 	.word	0x080044e0
 8003604:	080044e0 	.word	0x080044e0
 8003608:	080044e0 	.word	0x080044e0
 800360c:	080044e4 	.word	0x080044e4

08003610 <memset>:
 8003610:	4402      	add	r2, r0
 8003612:	4603      	mov	r3, r0
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	f803 1b01 	strb.w	r1, [r3], #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <iprintf>:
 8003620:	b40f      	push	{r0, r1, r2, r3}
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <iprintf+0x2c>)
 8003624:	b513      	push	{r0, r1, r4, lr}
 8003626:	681c      	ldr	r4, [r3, #0]
 8003628:	b124      	cbz	r4, 8003634 <iprintf+0x14>
 800362a:	69a3      	ldr	r3, [r4, #24]
 800362c:	b913      	cbnz	r3, 8003634 <iprintf+0x14>
 800362e:	4620      	mov	r0, r4
 8003630:	f000 f84e 	bl	80036d0 <__sinit>
 8003634:	ab05      	add	r3, sp, #20
 8003636:	9a04      	ldr	r2, [sp, #16]
 8003638:	68a1      	ldr	r1, [r4, #8]
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	4620      	mov	r0, r4
 800363e:	f000 f955 	bl	80038ec <_vfiprintf_r>
 8003642:	b002      	add	sp, #8
 8003644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003648:	b004      	add	sp, #16
 800364a:	4770      	bx	lr
 800364c:	2000000c 	.word	0x2000000c

08003650 <std>:
 8003650:	2300      	movs	r3, #0
 8003652:	b510      	push	{r4, lr}
 8003654:	4604      	mov	r4, r0
 8003656:	e9c0 3300 	strd	r3, r3, [r0]
 800365a:	6083      	str	r3, [r0, #8]
 800365c:	8181      	strh	r1, [r0, #12]
 800365e:	6643      	str	r3, [r0, #100]	; 0x64
 8003660:	81c2      	strh	r2, [r0, #14]
 8003662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003666:	6183      	str	r3, [r0, #24]
 8003668:	4619      	mov	r1, r3
 800366a:	2208      	movs	r2, #8
 800366c:	305c      	adds	r0, #92	; 0x5c
 800366e:	f7ff ffcf 	bl	8003610 <memset>
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <std+0x38>)
 8003674:	6263      	str	r3, [r4, #36]	; 0x24
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <std+0x3c>)
 8003678:	62a3      	str	r3, [r4, #40]	; 0x28
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <std+0x40>)
 800367c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <std+0x44>)
 8003680:	6224      	str	r4, [r4, #32]
 8003682:	6323      	str	r3, [r4, #48]	; 0x30
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	08003e49 	.word	0x08003e49
 800368c:	08003e6b 	.word	0x08003e6b
 8003690:	08003ea3 	.word	0x08003ea3
 8003694:	08003ec7 	.word	0x08003ec7

08003698 <_cleanup_r>:
 8003698:	4901      	ldr	r1, [pc, #4]	; (80036a0 <_cleanup_r+0x8>)
 800369a:	f000 b885 	b.w	80037a8 <_fwalk_reent>
 800369e:	bf00      	nop
 80036a0:	080041a1 	.word	0x080041a1

080036a4 <__sfmoreglue>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	1e4a      	subs	r2, r1, #1
 80036a8:	2568      	movs	r5, #104	; 0x68
 80036aa:	4355      	muls	r5, r2
 80036ac:	460e      	mov	r6, r1
 80036ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036b2:	f000 f897 	bl	80037e4 <_malloc_r>
 80036b6:	4604      	mov	r4, r0
 80036b8:	b140      	cbz	r0, 80036cc <__sfmoreglue+0x28>
 80036ba:	2100      	movs	r1, #0
 80036bc:	e9c0 1600 	strd	r1, r6, [r0]
 80036c0:	300c      	adds	r0, #12
 80036c2:	60a0      	str	r0, [r4, #8]
 80036c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036c8:	f7ff ffa2 	bl	8003610 <memset>
 80036cc:	4620      	mov	r0, r4
 80036ce:	bd70      	pop	{r4, r5, r6, pc}

080036d0 <__sinit>:
 80036d0:	6983      	ldr	r3, [r0, #24]
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	bb33      	cbnz	r3, 8003726 <__sinit+0x56>
 80036d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80036dc:	6503      	str	r3, [r0, #80]	; 0x50
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <__sinit+0x58>)
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <__sinit+0x5c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6282      	str	r2, [r0, #40]	; 0x28
 80036e6:	4298      	cmp	r0, r3
 80036e8:	bf04      	itt	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	6183      	streq	r3, [r0, #24]
 80036ee:	f000 f81f 	bl	8003730 <__sfp>
 80036f2:	6060      	str	r0, [r4, #4]
 80036f4:	4620      	mov	r0, r4
 80036f6:	f000 f81b 	bl	8003730 <__sfp>
 80036fa:	60a0      	str	r0, [r4, #8]
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 f817 	bl	8003730 <__sfp>
 8003702:	2200      	movs	r2, #0
 8003704:	60e0      	str	r0, [r4, #12]
 8003706:	2104      	movs	r1, #4
 8003708:	6860      	ldr	r0, [r4, #4]
 800370a:	f7ff ffa1 	bl	8003650 <std>
 800370e:	2201      	movs	r2, #1
 8003710:	2109      	movs	r1, #9
 8003712:	68a0      	ldr	r0, [r4, #8]
 8003714:	f7ff ff9c 	bl	8003650 <std>
 8003718:	2202      	movs	r2, #2
 800371a:	2112      	movs	r1, #18
 800371c:	68e0      	ldr	r0, [r4, #12]
 800371e:	f7ff ff97 	bl	8003650 <std>
 8003722:	2301      	movs	r3, #1
 8003724:	61a3      	str	r3, [r4, #24]
 8003726:	bd10      	pop	{r4, pc}
 8003728:	08004448 	.word	0x08004448
 800372c:	08003699 	.word	0x08003699

08003730 <__sfp>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <__sfp+0x70>)
 8003734:	681e      	ldr	r6, [r3, #0]
 8003736:	69b3      	ldr	r3, [r6, #24]
 8003738:	4607      	mov	r7, r0
 800373a:	b913      	cbnz	r3, 8003742 <__sfp+0x12>
 800373c:	4630      	mov	r0, r6
 800373e:	f7ff ffc7 	bl	80036d0 <__sinit>
 8003742:	3648      	adds	r6, #72	; 0x48
 8003744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003748:	3b01      	subs	r3, #1
 800374a:	d503      	bpl.n	8003754 <__sfp+0x24>
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	b133      	cbz	r3, 800375e <__sfp+0x2e>
 8003750:	6836      	ldr	r6, [r6, #0]
 8003752:	e7f7      	b.n	8003744 <__sfp+0x14>
 8003754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003758:	b16d      	cbz	r5, 8003776 <__sfp+0x46>
 800375a:	3468      	adds	r4, #104	; 0x68
 800375c:	e7f4      	b.n	8003748 <__sfp+0x18>
 800375e:	2104      	movs	r1, #4
 8003760:	4638      	mov	r0, r7
 8003762:	f7ff ff9f 	bl	80036a4 <__sfmoreglue>
 8003766:	6030      	str	r0, [r6, #0]
 8003768:	2800      	cmp	r0, #0
 800376a:	d1f1      	bne.n	8003750 <__sfp+0x20>
 800376c:	230c      	movs	r3, #12
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4604      	mov	r4, r0
 8003772:	4620      	mov	r0, r4
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <__sfp+0x74>)
 8003778:	6665      	str	r5, [r4, #100]	; 0x64
 800377a:	e9c4 5500 	strd	r5, r5, [r4]
 800377e:	60a5      	str	r5, [r4, #8]
 8003780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003788:	2208      	movs	r2, #8
 800378a:	4629      	mov	r1, r5
 800378c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003790:	f7ff ff3e 	bl	8003610 <memset>
 8003794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800379c:	e7e9      	b.n	8003772 <__sfp+0x42>
 800379e:	bf00      	nop
 80037a0:	08004448 	.word	0x08004448
 80037a4:	ffff0001 	.word	0xffff0001

080037a8 <_fwalk_reent>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	4680      	mov	r8, r0
 80037ae:	4689      	mov	r9, r1
 80037b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037b4:	2600      	movs	r6, #0
 80037b6:	b914      	cbnz	r4, 80037be <_fwalk_reent+0x16>
 80037b8:	4630      	mov	r0, r6
 80037ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80037c2:	3f01      	subs	r7, #1
 80037c4:	d501      	bpl.n	80037ca <_fwalk_reent+0x22>
 80037c6:	6824      	ldr	r4, [r4, #0]
 80037c8:	e7f5      	b.n	80037b6 <_fwalk_reent+0xe>
 80037ca:	89ab      	ldrh	r3, [r5, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d907      	bls.n	80037e0 <_fwalk_reent+0x38>
 80037d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037d4:	3301      	adds	r3, #1
 80037d6:	d003      	beq.n	80037e0 <_fwalk_reent+0x38>
 80037d8:	4629      	mov	r1, r5
 80037da:	4640      	mov	r0, r8
 80037dc:	47c8      	blx	r9
 80037de:	4306      	orrs	r6, r0
 80037e0:	3568      	adds	r5, #104	; 0x68
 80037e2:	e7ee      	b.n	80037c2 <_fwalk_reent+0x1a>

080037e4 <_malloc_r>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	1ccd      	adds	r5, r1, #3
 80037e8:	f025 0503 	bic.w	r5, r5, #3
 80037ec:	3508      	adds	r5, #8
 80037ee:	2d0c      	cmp	r5, #12
 80037f0:	bf38      	it	cc
 80037f2:	250c      	movcc	r5, #12
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	4606      	mov	r6, r0
 80037f8:	db01      	blt.n	80037fe <_malloc_r+0x1a>
 80037fa:	42a9      	cmp	r1, r5
 80037fc:	d903      	bls.n	8003806 <_malloc_r+0x22>
 80037fe:	230c      	movs	r3, #12
 8003800:	6033      	str	r3, [r6, #0]
 8003802:	2000      	movs	r0, #0
 8003804:	bd70      	pop	{r4, r5, r6, pc}
 8003806:	f000 fd6b 	bl	80042e0 <__malloc_lock>
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <_malloc_r+0xac>)
 800380c:	6814      	ldr	r4, [r2, #0]
 800380e:	4621      	mov	r1, r4
 8003810:	b991      	cbnz	r1, 8003838 <_malloc_r+0x54>
 8003812:	4c20      	ldr	r4, [pc, #128]	; (8003894 <_malloc_r+0xb0>)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	b91b      	cbnz	r3, 8003820 <_malloc_r+0x3c>
 8003818:	4630      	mov	r0, r6
 800381a:	f000 fb05 	bl	8003e28 <_sbrk_r>
 800381e:	6020      	str	r0, [r4, #0]
 8003820:	4629      	mov	r1, r5
 8003822:	4630      	mov	r0, r6
 8003824:	f000 fb00 	bl	8003e28 <_sbrk_r>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d124      	bne.n	8003876 <_malloc_r+0x92>
 800382c:	230c      	movs	r3, #12
 800382e:	6033      	str	r3, [r6, #0]
 8003830:	4630      	mov	r0, r6
 8003832:	f000 fd56 	bl	80042e2 <__malloc_unlock>
 8003836:	e7e4      	b.n	8003802 <_malloc_r+0x1e>
 8003838:	680b      	ldr	r3, [r1, #0]
 800383a:	1b5b      	subs	r3, r3, r5
 800383c:	d418      	bmi.n	8003870 <_malloc_r+0x8c>
 800383e:	2b0b      	cmp	r3, #11
 8003840:	d90f      	bls.n	8003862 <_malloc_r+0x7e>
 8003842:	600b      	str	r3, [r1, #0]
 8003844:	50cd      	str	r5, [r1, r3]
 8003846:	18cc      	adds	r4, r1, r3
 8003848:	4630      	mov	r0, r6
 800384a:	f000 fd4a 	bl	80042e2 <__malloc_unlock>
 800384e:	f104 000b 	add.w	r0, r4, #11
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	f020 0007 	bic.w	r0, r0, #7
 8003858:	1ac3      	subs	r3, r0, r3
 800385a:	d0d3      	beq.n	8003804 <_malloc_r+0x20>
 800385c:	425a      	negs	r2, r3
 800385e:	50e2      	str	r2, [r4, r3]
 8003860:	e7d0      	b.n	8003804 <_malloc_r+0x20>
 8003862:	428c      	cmp	r4, r1
 8003864:	684b      	ldr	r3, [r1, #4]
 8003866:	bf16      	itet	ne
 8003868:	6063      	strne	r3, [r4, #4]
 800386a:	6013      	streq	r3, [r2, #0]
 800386c:	460c      	movne	r4, r1
 800386e:	e7eb      	b.n	8003848 <_malloc_r+0x64>
 8003870:	460c      	mov	r4, r1
 8003872:	6849      	ldr	r1, [r1, #4]
 8003874:	e7cc      	b.n	8003810 <_malloc_r+0x2c>
 8003876:	1cc4      	adds	r4, r0, #3
 8003878:	f024 0403 	bic.w	r4, r4, #3
 800387c:	42a0      	cmp	r0, r4
 800387e:	d005      	beq.n	800388c <_malloc_r+0xa8>
 8003880:	1a21      	subs	r1, r4, r0
 8003882:	4630      	mov	r0, r6
 8003884:	f000 fad0 	bl	8003e28 <_sbrk_r>
 8003888:	3001      	adds	r0, #1
 800388a:	d0cf      	beq.n	800382c <_malloc_r+0x48>
 800388c:	6025      	str	r5, [r4, #0]
 800388e:	e7db      	b.n	8003848 <_malloc_r+0x64>
 8003890:	200000b8 	.word	0x200000b8
 8003894:	200000bc 	.word	0x200000bc

08003898 <__sfputc_r>:
 8003898:	6893      	ldr	r3, [r2, #8]
 800389a:	3b01      	subs	r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	b410      	push	{r4}
 80038a0:	6093      	str	r3, [r2, #8]
 80038a2:	da08      	bge.n	80038b6 <__sfputc_r+0x1e>
 80038a4:	6994      	ldr	r4, [r2, #24]
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	db01      	blt.n	80038ae <__sfputc_r+0x16>
 80038aa:	290a      	cmp	r1, #10
 80038ac:	d103      	bne.n	80038b6 <__sfputc_r+0x1e>
 80038ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b2:	f000 bb0d 	b.w	8003ed0 <__swbuf_r>
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	1c58      	adds	r0, r3, #1
 80038ba:	6010      	str	r0, [r2, #0]
 80038bc:	7019      	strb	r1, [r3, #0]
 80038be:	4608      	mov	r0, r1
 80038c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <__sfputs_r>:
 80038c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c8:	4606      	mov	r6, r0
 80038ca:	460f      	mov	r7, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	18d5      	adds	r5, r2, r3
 80038d0:	42ac      	cmp	r4, r5
 80038d2:	d101      	bne.n	80038d8 <__sfputs_r+0x12>
 80038d4:	2000      	movs	r0, #0
 80038d6:	e007      	b.n	80038e8 <__sfputs_r+0x22>
 80038d8:	463a      	mov	r2, r7
 80038da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038de:	4630      	mov	r0, r6
 80038e0:	f7ff ffda 	bl	8003898 <__sfputc_r>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d1f3      	bne.n	80038d0 <__sfputs_r+0xa>
 80038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038ec <_vfiprintf_r>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	460c      	mov	r4, r1
 80038f2:	b09d      	sub	sp, #116	; 0x74
 80038f4:	4617      	mov	r7, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4606      	mov	r6, r0
 80038fa:	b118      	cbz	r0, 8003904 <_vfiprintf_r+0x18>
 80038fc:	6983      	ldr	r3, [r0, #24]
 80038fe:	b90b      	cbnz	r3, 8003904 <_vfiprintf_r+0x18>
 8003900:	f7ff fee6 	bl	80036d0 <__sinit>
 8003904:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <_vfiprintf_r+0x20c>)
 8003906:	429c      	cmp	r4, r3
 8003908:	d158      	bne.n	80039bc <_vfiprintf_r+0xd0>
 800390a:	6874      	ldr	r4, [r6, #4]
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	0718      	lsls	r0, r3, #28
 8003910:	d55e      	bpl.n	80039d0 <_vfiprintf_r+0xe4>
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <_vfiprintf_r+0xe4>
 8003918:	2300      	movs	r3, #0
 800391a:	9309      	str	r3, [sp, #36]	; 0x24
 800391c:	2320      	movs	r3, #32
 800391e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003922:	2330      	movs	r3, #48	; 0x30
 8003924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003928:	9503      	str	r5, [sp, #12]
 800392a:	f04f 0b01 	mov.w	fp, #1
 800392e:	46b8      	mov	r8, r7
 8003930:	4645      	mov	r5, r8
 8003932:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003936:	b10b      	cbz	r3, 800393c <_vfiprintf_r+0x50>
 8003938:	2b25      	cmp	r3, #37	; 0x25
 800393a:	d154      	bne.n	80039e6 <_vfiprintf_r+0xfa>
 800393c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003940:	d00b      	beq.n	800395a <_vfiprintf_r+0x6e>
 8003942:	4653      	mov	r3, sl
 8003944:	463a      	mov	r2, r7
 8003946:	4621      	mov	r1, r4
 8003948:	4630      	mov	r0, r6
 800394a:	f7ff ffbc 	bl	80038c6 <__sfputs_r>
 800394e:	3001      	adds	r0, #1
 8003950:	f000 80c2 	beq.w	8003ad8 <_vfiprintf_r+0x1ec>
 8003954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003956:	4453      	add	r3, sl
 8003958:	9309      	str	r3, [sp, #36]	; 0x24
 800395a:	f898 3000 	ldrb.w	r3, [r8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80ba 	beq.w	8003ad8 <_vfiprintf_r+0x1ec>
 8003964:	2300      	movs	r3, #0
 8003966:	f04f 32ff 	mov.w	r2, #4294967295
 800396a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	9307      	str	r3, [sp, #28]
 8003972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003976:	931a      	str	r3, [sp, #104]	; 0x68
 8003978:	46a8      	mov	r8, r5
 800397a:	2205      	movs	r2, #5
 800397c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003980:	485e      	ldr	r0, [pc, #376]	; (8003afc <_vfiprintf_r+0x210>)
 8003982:	f7fc fc25 	bl	80001d0 <memchr>
 8003986:	9b04      	ldr	r3, [sp, #16]
 8003988:	bb78      	cbnz	r0, 80039ea <_vfiprintf_r+0xfe>
 800398a:	06d9      	lsls	r1, r3, #27
 800398c:	bf44      	itt	mi
 800398e:	2220      	movmi	r2, #32
 8003990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003994:	071a      	lsls	r2, r3, #28
 8003996:	bf44      	itt	mi
 8003998:	222b      	movmi	r2, #43	; 0x2b
 800399a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800399e:	782a      	ldrb	r2, [r5, #0]
 80039a0:	2a2a      	cmp	r2, #42	; 0x2a
 80039a2:	d02a      	beq.n	80039fa <_vfiprintf_r+0x10e>
 80039a4:	9a07      	ldr	r2, [sp, #28]
 80039a6:	46a8      	mov	r8, r5
 80039a8:	2000      	movs	r0, #0
 80039aa:	250a      	movs	r5, #10
 80039ac:	4641      	mov	r1, r8
 80039ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039b2:	3b30      	subs	r3, #48	; 0x30
 80039b4:	2b09      	cmp	r3, #9
 80039b6:	d969      	bls.n	8003a8c <_vfiprintf_r+0x1a0>
 80039b8:	b360      	cbz	r0, 8003a14 <_vfiprintf_r+0x128>
 80039ba:	e024      	b.n	8003a06 <_vfiprintf_r+0x11a>
 80039bc:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <_vfiprintf_r+0x214>)
 80039be:	429c      	cmp	r4, r3
 80039c0:	d101      	bne.n	80039c6 <_vfiprintf_r+0xda>
 80039c2:	68b4      	ldr	r4, [r6, #8]
 80039c4:	e7a2      	b.n	800390c <_vfiprintf_r+0x20>
 80039c6:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <_vfiprintf_r+0x218>)
 80039c8:	429c      	cmp	r4, r3
 80039ca:	bf08      	it	eq
 80039cc:	68f4      	ldreq	r4, [r6, #12]
 80039ce:	e79d      	b.n	800390c <_vfiprintf_r+0x20>
 80039d0:	4621      	mov	r1, r4
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 fae0 	bl	8003f98 <__swsetup_r>
 80039d8:	2800      	cmp	r0, #0
 80039da:	d09d      	beq.n	8003918 <_vfiprintf_r+0x2c>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	b01d      	add	sp, #116	; 0x74
 80039e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e6:	46a8      	mov	r8, r5
 80039e8:	e7a2      	b.n	8003930 <_vfiprintf_r+0x44>
 80039ea:	4a44      	ldr	r2, [pc, #272]	; (8003afc <_vfiprintf_r+0x210>)
 80039ec:	1a80      	subs	r0, r0, r2
 80039ee:	fa0b f000 	lsl.w	r0, fp, r0
 80039f2:	4318      	orrs	r0, r3
 80039f4:	9004      	str	r0, [sp, #16]
 80039f6:	4645      	mov	r5, r8
 80039f8:	e7be      	b.n	8003978 <_vfiprintf_r+0x8c>
 80039fa:	9a03      	ldr	r2, [sp, #12]
 80039fc:	1d11      	adds	r1, r2, #4
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	9103      	str	r1, [sp, #12]
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	db01      	blt.n	8003a0a <_vfiprintf_r+0x11e>
 8003a06:	9207      	str	r2, [sp, #28]
 8003a08:	e004      	b.n	8003a14 <_vfiprintf_r+0x128>
 8003a0a:	4252      	negs	r2, r2
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	9207      	str	r2, [sp, #28]
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	f898 3000 	ldrb.w	r3, [r8]
 8003a18:	2b2e      	cmp	r3, #46	; 0x2e
 8003a1a:	d10e      	bne.n	8003a3a <_vfiprintf_r+0x14e>
 8003a1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a20:	2b2a      	cmp	r3, #42	; 0x2a
 8003a22:	d138      	bne.n	8003a96 <_vfiprintf_r+0x1aa>
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	1d1a      	adds	r2, r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	9203      	str	r2, [sp, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bfb8      	it	lt
 8003a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a34:	f108 0802 	add.w	r8, r8, #2
 8003a38:	9305      	str	r3, [sp, #20]
 8003a3a:	4d33      	ldr	r5, [pc, #204]	; (8003b08 <_vfiprintf_r+0x21c>)
 8003a3c:	f898 1000 	ldrb.w	r1, [r8]
 8003a40:	2203      	movs	r2, #3
 8003a42:	4628      	mov	r0, r5
 8003a44:	f7fc fbc4 	bl	80001d0 <memchr>
 8003a48:	b140      	cbz	r0, 8003a5c <_vfiprintf_r+0x170>
 8003a4a:	2340      	movs	r3, #64	; 0x40
 8003a4c:	1b40      	subs	r0, r0, r5
 8003a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a52:	9b04      	ldr	r3, [sp, #16]
 8003a54:	4303      	orrs	r3, r0
 8003a56:	f108 0801 	add.w	r8, r8, #1
 8003a5a:	9304      	str	r3, [sp, #16]
 8003a5c:	f898 1000 	ldrb.w	r1, [r8]
 8003a60:	482a      	ldr	r0, [pc, #168]	; (8003b0c <_vfiprintf_r+0x220>)
 8003a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a66:	2206      	movs	r2, #6
 8003a68:	f108 0701 	add.w	r7, r8, #1
 8003a6c:	f7fc fbb0 	bl	80001d0 <memchr>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d037      	beq.n	8003ae4 <_vfiprintf_r+0x1f8>
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <_vfiprintf_r+0x224>)
 8003a76:	bb1b      	cbnz	r3, 8003ac0 <_vfiprintf_r+0x1d4>
 8003a78:	9b03      	ldr	r3, [sp, #12]
 8003a7a:	3307      	adds	r3, #7
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	3308      	adds	r3, #8
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a86:	444b      	add	r3, r9
 8003a88:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8a:	e750      	b.n	800392e <_vfiprintf_r+0x42>
 8003a8c:	fb05 3202 	mla	r2, r5, r2, r3
 8003a90:	2001      	movs	r0, #1
 8003a92:	4688      	mov	r8, r1
 8003a94:	e78a      	b.n	80039ac <_vfiprintf_r+0xc0>
 8003a96:	2300      	movs	r3, #0
 8003a98:	f108 0801 	add.w	r8, r8, #1
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	250a      	movs	r5, #10
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa8:	3a30      	subs	r2, #48	; 0x30
 8003aaa:	2a09      	cmp	r2, #9
 8003aac:	d903      	bls.n	8003ab6 <_vfiprintf_r+0x1ca>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0c3      	beq.n	8003a3a <_vfiprintf_r+0x14e>
 8003ab2:	9105      	str	r1, [sp, #20]
 8003ab4:	e7c1      	b.n	8003a3a <_vfiprintf_r+0x14e>
 8003ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8003aba:	2301      	movs	r3, #1
 8003abc:	4680      	mov	r8, r0
 8003abe:	e7f0      	b.n	8003aa2 <_vfiprintf_r+0x1b6>
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <_vfiprintf_r+0x228>)
 8003ac8:	a904      	add	r1, sp, #16
 8003aca:	4630      	mov	r0, r6
 8003acc:	f3af 8000 	nop.w
 8003ad0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ad4:	4681      	mov	r9, r0
 8003ad6:	d1d5      	bne.n	8003a84 <_vfiprintf_r+0x198>
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	065b      	lsls	r3, r3, #25
 8003adc:	f53f af7e 	bmi.w	80039dc <_vfiprintf_r+0xf0>
 8003ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ae2:	e77d      	b.n	80039e0 <_vfiprintf_r+0xf4>
 8003ae4:	ab03      	add	r3, sp, #12
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4622      	mov	r2, r4
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <_vfiprintf_r+0x228>)
 8003aec:	a904      	add	r1, sp, #16
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f888 	bl	8003c04 <_printf_i>
 8003af4:	e7ec      	b.n	8003ad0 <_vfiprintf_r+0x1e4>
 8003af6:	bf00      	nop
 8003af8:	0800446c 	.word	0x0800446c
 8003afc:	080044ac 	.word	0x080044ac
 8003b00:	0800448c 	.word	0x0800448c
 8003b04:	0800444c 	.word	0x0800444c
 8003b08:	080044b2 	.word	0x080044b2
 8003b0c:	080044b6 	.word	0x080044b6
 8003b10:	00000000 	.word	0x00000000
 8003b14:	080038c7 	.word	0x080038c7

08003b18 <_printf_common>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	4691      	mov	r9, r2
 8003b1e:	461f      	mov	r7, r3
 8003b20:	688a      	ldr	r2, [r1, #8]
 8003b22:	690b      	ldr	r3, [r1, #16]
 8003b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bfb8      	it	lt
 8003b2c:	4613      	movlt	r3, r2
 8003b2e:	f8c9 3000 	str.w	r3, [r9]
 8003b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b36:	4606      	mov	r6, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	b112      	cbz	r2, 8003b42 <_printf_common+0x2a>
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f8c9 3000 	str.w	r3, [r9]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	0699      	lsls	r1, r3, #26
 8003b46:	bf42      	ittt	mi
 8003b48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b4c:	3302      	addmi	r3, #2
 8003b4e:	f8c9 3000 	strmi.w	r3, [r9]
 8003b52:	6825      	ldr	r5, [r4, #0]
 8003b54:	f015 0506 	ands.w	r5, r5, #6
 8003b58:	d107      	bne.n	8003b6a <_printf_common+0x52>
 8003b5a:	f104 0a19 	add.w	sl, r4, #25
 8003b5e:	68e3      	ldr	r3, [r4, #12]
 8003b60:	f8d9 2000 	ldr.w	r2, [r9]
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	42ab      	cmp	r3, r5
 8003b68:	dc28      	bgt.n	8003bbc <_printf_common+0xa4>
 8003b6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	3300      	adds	r3, #0
 8003b72:	bf18      	it	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	0692      	lsls	r2, r2, #26
 8003b78:	d42d      	bmi.n	8003bd6 <_printf_common+0xbe>
 8003b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b7e:	4639      	mov	r1, r7
 8003b80:	4630      	mov	r0, r6
 8003b82:	47c0      	blx	r8
 8003b84:	3001      	adds	r0, #1
 8003b86:	d020      	beq.n	8003bca <_printf_common+0xb2>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	68e5      	ldr	r5, [r4, #12]
 8003b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b90:	f003 0306 	and.w	r3, r3, #6
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	bf08      	it	eq
 8003b98:	1aad      	subeq	r5, r5, r2
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	bf0c      	ite	eq
 8003ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba4:	2500      	movne	r5, #0
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	bfc4      	itt	gt
 8003baa:	1a9b      	subgt	r3, r3, r2
 8003bac:	18ed      	addgt	r5, r5, r3
 8003bae:	f04f 0900 	mov.w	r9, #0
 8003bb2:	341a      	adds	r4, #26
 8003bb4:	454d      	cmp	r5, r9
 8003bb6:	d11a      	bne.n	8003bee <_printf_common+0xd6>
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e008      	b.n	8003bce <_printf_common+0xb6>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4652      	mov	r2, sl
 8003bc0:	4639      	mov	r1, r7
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	47c0      	blx	r8
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d103      	bne.n	8003bd2 <_printf_common+0xba>
 8003bca:	f04f 30ff 	mov.w	r0, #4294967295
 8003bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd2:	3501      	adds	r5, #1
 8003bd4:	e7c3      	b.n	8003b5e <_printf_common+0x46>
 8003bd6:	18e1      	adds	r1, r4, r3
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	2030      	movs	r0, #48	; 0x30
 8003bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be0:	4422      	add	r2, r4
 8003be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bea:	3302      	adds	r3, #2
 8003bec:	e7c5      	b.n	8003b7a <_printf_common+0x62>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	47c0      	blx	r8
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d0e6      	beq.n	8003bca <_printf_common+0xb2>
 8003bfc:	f109 0901 	add.w	r9, r9, #1
 8003c00:	e7d8      	b.n	8003bb4 <_printf_common+0x9c>
	...

08003c04 <_printf_i>:
 8003c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	7e09      	ldrb	r1, [r1, #24]
 8003c10:	b085      	sub	sp, #20
 8003c12:	296e      	cmp	r1, #110	; 0x6e
 8003c14:	4617      	mov	r7, r2
 8003c16:	4606      	mov	r6, r0
 8003c18:	4698      	mov	r8, r3
 8003c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c1c:	f000 80b3 	beq.w	8003d86 <_printf_i+0x182>
 8003c20:	d822      	bhi.n	8003c68 <_printf_i+0x64>
 8003c22:	2963      	cmp	r1, #99	; 0x63
 8003c24:	d036      	beq.n	8003c94 <_printf_i+0x90>
 8003c26:	d80a      	bhi.n	8003c3e <_printf_i+0x3a>
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	f000 80b9 	beq.w	8003da0 <_printf_i+0x19c>
 8003c2e:	2958      	cmp	r1, #88	; 0x58
 8003c30:	f000 8083 	beq.w	8003d3a <_printf_i+0x136>
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c3c:	e032      	b.n	8003ca4 <_printf_i+0xa0>
 8003c3e:	2964      	cmp	r1, #100	; 0x64
 8003c40:	d001      	beq.n	8003c46 <_printf_i+0x42>
 8003c42:	2969      	cmp	r1, #105	; 0x69
 8003c44:	d1f6      	bne.n	8003c34 <_printf_i+0x30>
 8003c46:	6820      	ldr	r0, [r4, #0]
 8003c48:	6813      	ldr	r3, [r2, #0]
 8003c4a:	0605      	lsls	r5, r0, #24
 8003c4c:	f103 0104 	add.w	r1, r3, #4
 8003c50:	d52a      	bpl.n	8003ca8 <_printf_i+0xa4>
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da03      	bge.n	8003c62 <_printf_i+0x5e>
 8003c5a:	222d      	movs	r2, #45	; 0x2d
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c62:	486f      	ldr	r0, [pc, #444]	; (8003e20 <_printf_i+0x21c>)
 8003c64:	220a      	movs	r2, #10
 8003c66:	e039      	b.n	8003cdc <_printf_i+0xd8>
 8003c68:	2973      	cmp	r1, #115	; 0x73
 8003c6a:	f000 809d 	beq.w	8003da8 <_printf_i+0x1a4>
 8003c6e:	d808      	bhi.n	8003c82 <_printf_i+0x7e>
 8003c70:	296f      	cmp	r1, #111	; 0x6f
 8003c72:	d020      	beq.n	8003cb6 <_printf_i+0xb2>
 8003c74:	2970      	cmp	r1, #112	; 0x70
 8003c76:	d1dd      	bne.n	8003c34 <_printf_i+0x30>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f043 0320 	orr.w	r3, r3, #32
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	e003      	b.n	8003c8a <_printf_i+0x86>
 8003c82:	2975      	cmp	r1, #117	; 0x75
 8003c84:	d017      	beq.n	8003cb6 <_printf_i+0xb2>
 8003c86:	2978      	cmp	r1, #120	; 0x78
 8003c88:	d1d4      	bne.n	8003c34 <_printf_i+0x30>
 8003c8a:	2378      	movs	r3, #120	; 0x78
 8003c8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c90:	4864      	ldr	r0, [pc, #400]	; (8003e24 <_printf_i+0x220>)
 8003c92:	e055      	b.n	8003d40 <_printf_i+0x13c>
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	1d19      	adds	r1, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6011      	str	r1, [r2, #0]
 8003c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e08c      	b.n	8003dc2 <_printf_i+0x1be>
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6011      	str	r1, [r2, #0]
 8003cac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cb0:	bf18      	it	ne
 8003cb2:	b21b      	sxthne	r3, r3
 8003cb4:	e7cf      	b.n	8003c56 <_printf_i+0x52>
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	6825      	ldr	r5, [r4, #0]
 8003cba:	1d18      	adds	r0, r3, #4
 8003cbc:	6010      	str	r0, [r2, #0]
 8003cbe:	0628      	lsls	r0, r5, #24
 8003cc0:	d501      	bpl.n	8003cc6 <_printf_i+0xc2>
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e002      	b.n	8003ccc <_printf_i+0xc8>
 8003cc6:	0668      	lsls	r0, r5, #25
 8003cc8:	d5fb      	bpl.n	8003cc2 <_printf_i+0xbe>
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	4854      	ldr	r0, [pc, #336]	; (8003e20 <_printf_i+0x21c>)
 8003cce:	296f      	cmp	r1, #111	; 0x6f
 8003cd0:	bf14      	ite	ne
 8003cd2:	220a      	movne	r2, #10
 8003cd4:	2208      	moveq	r2, #8
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cdc:	6865      	ldr	r5, [r4, #4]
 8003cde:	60a5      	str	r5, [r4, #8]
 8003ce0:	2d00      	cmp	r5, #0
 8003ce2:	f2c0 8095 	blt.w	8003e10 <_printf_i+0x20c>
 8003ce6:	6821      	ldr	r1, [r4, #0]
 8003ce8:	f021 0104 	bic.w	r1, r1, #4
 8003cec:	6021      	str	r1, [r4, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d13d      	bne.n	8003d6e <_printf_i+0x16a>
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	f040 808e 	bne.w	8003e14 <_printf_i+0x210>
 8003cf8:	4665      	mov	r5, ip
 8003cfa:	2a08      	cmp	r2, #8
 8003cfc:	d10b      	bne.n	8003d16 <_printf_i+0x112>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	07db      	lsls	r3, r3, #31
 8003d02:	d508      	bpl.n	8003d16 <_printf_i+0x112>
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	bfde      	ittt	le
 8003d0c:	2330      	movle	r3, #48	; 0x30
 8003d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d16:	ebac 0305 	sub.w	r3, ip, r5
 8003d1a:	6123      	str	r3, [r4, #16]
 8003d1c:	f8cd 8000 	str.w	r8, [sp]
 8003d20:	463b      	mov	r3, r7
 8003d22:	aa03      	add	r2, sp, #12
 8003d24:	4621      	mov	r1, r4
 8003d26:	4630      	mov	r0, r6
 8003d28:	f7ff fef6 	bl	8003b18 <_printf_common>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d14d      	bne.n	8003dcc <_printf_i+0x1c8>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	b005      	add	sp, #20
 8003d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d3a:	4839      	ldr	r0, [pc, #228]	; (8003e20 <_printf_i+0x21c>)
 8003d3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d40:	6813      	ldr	r3, [r2, #0]
 8003d42:	6821      	ldr	r1, [r4, #0]
 8003d44:	1d1d      	adds	r5, r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6015      	str	r5, [r2, #0]
 8003d4a:	060a      	lsls	r2, r1, #24
 8003d4c:	d50b      	bpl.n	8003d66 <_printf_i+0x162>
 8003d4e:	07ca      	lsls	r2, r1, #31
 8003d50:	bf44      	itt	mi
 8003d52:	f041 0120 	orrmi.w	r1, r1, #32
 8003d56:	6021      	strmi	r1, [r4, #0]
 8003d58:	b91b      	cbnz	r3, 8003d62 <_printf_i+0x15e>
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	f022 0220 	bic.w	r2, r2, #32
 8003d60:	6022      	str	r2, [r4, #0]
 8003d62:	2210      	movs	r2, #16
 8003d64:	e7b7      	b.n	8003cd6 <_printf_i+0xd2>
 8003d66:	064d      	lsls	r5, r1, #25
 8003d68:	bf48      	it	mi
 8003d6a:	b29b      	uxthmi	r3, r3
 8003d6c:	e7ef      	b.n	8003d4e <_printf_i+0x14a>
 8003d6e:	4665      	mov	r5, ip
 8003d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d74:	fb02 3311 	mls	r3, r2, r1, r3
 8003d78:	5cc3      	ldrb	r3, [r0, r3]
 8003d7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d7e:	460b      	mov	r3, r1
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d1f5      	bne.n	8003d70 <_printf_i+0x16c>
 8003d84:	e7b9      	b.n	8003cfa <_printf_i+0xf6>
 8003d86:	6813      	ldr	r3, [r2, #0]
 8003d88:	6825      	ldr	r5, [r4, #0]
 8003d8a:	6961      	ldr	r1, [r4, #20]
 8003d8c:	1d18      	adds	r0, r3, #4
 8003d8e:	6010      	str	r0, [r2, #0]
 8003d90:	0628      	lsls	r0, r5, #24
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	d501      	bpl.n	8003d9a <_printf_i+0x196>
 8003d96:	6019      	str	r1, [r3, #0]
 8003d98:	e002      	b.n	8003da0 <_printf_i+0x19c>
 8003d9a:	066a      	lsls	r2, r5, #25
 8003d9c:	d5fb      	bpl.n	8003d96 <_printf_i+0x192>
 8003d9e:	8019      	strh	r1, [r3, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	6123      	str	r3, [r4, #16]
 8003da4:	4665      	mov	r5, ip
 8003da6:	e7b9      	b.n	8003d1c <_printf_i+0x118>
 8003da8:	6813      	ldr	r3, [r2, #0]
 8003daa:	1d19      	adds	r1, r3, #4
 8003dac:	6011      	str	r1, [r2, #0]
 8003dae:	681d      	ldr	r5, [r3, #0]
 8003db0:	6862      	ldr	r2, [r4, #4]
 8003db2:	2100      	movs	r1, #0
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7fc fa0b 	bl	80001d0 <memchr>
 8003dba:	b108      	cbz	r0, 8003dc0 <_printf_i+0x1bc>
 8003dbc:	1b40      	subs	r0, r0, r5
 8003dbe:	6060      	str	r0, [r4, #4]
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dca:	e7a7      	b.n	8003d1c <_printf_i+0x118>
 8003dcc:	6923      	ldr	r3, [r4, #16]
 8003dce:	462a      	mov	r2, r5
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	47c0      	blx	r8
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d0aa      	beq.n	8003d30 <_printf_i+0x12c>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	079b      	lsls	r3, r3, #30
 8003dde:	d413      	bmi.n	8003e08 <_printf_i+0x204>
 8003de0:	68e0      	ldr	r0, [r4, #12]
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	4298      	cmp	r0, r3
 8003de6:	bfb8      	it	lt
 8003de8:	4618      	movlt	r0, r3
 8003dea:	e7a3      	b.n	8003d34 <_printf_i+0x130>
 8003dec:	2301      	movs	r3, #1
 8003dee:	464a      	mov	r2, r9
 8003df0:	4639      	mov	r1, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	47c0      	blx	r8
 8003df6:	3001      	adds	r0, #1
 8003df8:	d09a      	beq.n	8003d30 <_printf_i+0x12c>
 8003dfa:	3501      	adds	r5, #1
 8003dfc:	68e3      	ldr	r3, [r4, #12]
 8003dfe:	9a03      	ldr	r2, [sp, #12]
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	42ab      	cmp	r3, r5
 8003e04:	dcf2      	bgt.n	8003dec <_printf_i+0x1e8>
 8003e06:	e7eb      	b.n	8003de0 <_printf_i+0x1dc>
 8003e08:	2500      	movs	r5, #0
 8003e0a:	f104 0919 	add.w	r9, r4, #25
 8003e0e:	e7f5      	b.n	8003dfc <_printf_i+0x1f8>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ac      	bne.n	8003d6e <_printf_i+0x16a>
 8003e14:	7803      	ldrb	r3, [r0, #0]
 8003e16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e1e:	e76c      	b.n	8003cfa <_printf_i+0xf6>
 8003e20:	080044bd 	.word	0x080044bd
 8003e24:	080044ce 	.word	0x080044ce

08003e28 <_sbrk_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4c06      	ldr	r4, [pc, #24]	; (8003e44 <_sbrk_r+0x1c>)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4605      	mov	r5, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	f7fc fee2 	bl	8000bfc <_sbrk>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_sbrk_r+0x1a>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_sbrk_r+0x1a>
 8003e40:	602b      	str	r3, [r5, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000144 	.word	0x20000144

08003e48 <__sread>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 fa96 	bl	8004380 <_read_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	bfab      	itete	ge
 8003e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e5c:	181b      	addge	r3, r3, r0
 8003e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e62:	bfac      	ite	ge
 8003e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e66:	81a3      	strhlt	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__swrite>:
 8003e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	461f      	mov	r7, r3
 8003e70:	898b      	ldrh	r3, [r1, #12]
 8003e72:	05db      	lsls	r3, r3, #23
 8003e74:	4605      	mov	r5, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4616      	mov	r6, r2
 8003e7a:	d505      	bpl.n	8003e88 <__swrite+0x1e>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	f000 f9b6 	bl	80041f4 <_lseek_r>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	4632      	mov	r2, r6
 8003e96:	463b      	mov	r3, r7
 8003e98:	4628      	mov	r0, r5
 8003e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9e:	f000 b869 	b.w	8003f74 <_write_r>

08003ea2 <__sseek>:
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 f9a3 	bl	80041f4 <_lseek_r>
 8003eae:	1c43      	adds	r3, r0, #1
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	bf15      	itete	ne
 8003eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ebe:	81a3      	strheq	r3, [r4, #12]
 8003ec0:	bf18      	it	ne
 8003ec2:	81a3      	strhne	r3, [r4, #12]
 8003ec4:	bd10      	pop	{r4, pc}

08003ec6 <__sclose>:
 8003ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eca:	f000 b8d3 	b.w	8004074 <_close_r>
	...

08003ed0 <__swbuf_r>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	460e      	mov	r6, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	b118      	cbz	r0, 8003ee2 <__swbuf_r+0x12>
 8003eda:	6983      	ldr	r3, [r0, #24]
 8003edc:	b90b      	cbnz	r3, 8003ee2 <__swbuf_r+0x12>
 8003ede:	f7ff fbf7 	bl	80036d0 <__sinit>
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <__swbuf_r+0x98>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d12a      	bne.n	8003f3e <__swbuf_r+0x6e>
 8003ee8:	686c      	ldr	r4, [r5, #4]
 8003eea:	69a3      	ldr	r3, [r4, #24]
 8003eec:	60a3      	str	r3, [r4, #8]
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	071a      	lsls	r2, r3, #28
 8003ef2:	d52e      	bpl.n	8003f52 <__swbuf_r+0x82>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	b363      	cbz	r3, 8003f52 <__swbuf_r+0x82>
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	1ac0      	subs	r0, r0, r3
 8003efe:	6963      	ldr	r3, [r4, #20]
 8003f00:	b2f6      	uxtb	r6, r6
 8003f02:	4283      	cmp	r3, r0
 8003f04:	4637      	mov	r7, r6
 8003f06:	dc04      	bgt.n	8003f12 <__swbuf_r+0x42>
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f000 f948 	bl	80041a0 <_fflush_r>
 8003f10:	bb28      	cbnz	r0, 8003f5e <__swbuf_r+0x8e>
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60a3      	str	r3, [r4, #8]
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	6022      	str	r2, [r4, #0]
 8003f1e:	701e      	strb	r6, [r3, #0]
 8003f20:	6963      	ldr	r3, [r4, #20]
 8003f22:	3001      	adds	r0, #1
 8003f24:	4283      	cmp	r3, r0
 8003f26:	d004      	beq.n	8003f32 <__swbuf_r+0x62>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	07db      	lsls	r3, r3, #31
 8003f2c:	d519      	bpl.n	8003f62 <__swbuf_r+0x92>
 8003f2e:	2e0a      	cmp	r6, #10
 8003f30:	d117      	bne.n	8003f62 <__swbuf_r+0x92>
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
 8003f36:	f000 f933 	bl	80041a0 <_fflush_r>
 8003f3a:	b190      	cbz	r0, 8003f62 <__swbuf_r+0x92>
 8003f3c:	e00f      	b.n	8003f5e <__swbuf_r+0x8e>
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <__swbuf_r+0x9c>)
 8003f40:	429c      	cmp	r4, r3
 8003f42:	d101      	bne.n	8003f48 <__swbuf_r+0x78>
 8003f44:	68ac      	ldr	r4, [r5, #8]
 8003f46:	e7d0      	b.n	8003eea <__swbuf_r+0x1a>
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <__swbuf_r+0xa0>)
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	bf08      	it	eq
 8003f4e:	68ec      	ldreq	r4, [r5, #12]
 8003f50:	e7cb      	b.n	8003eea <__swbuf_r+0x1a>
 8003f52:	4621      	mov	r1, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	f000 f81f 	bl	8003f98 <__swsetup_r>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d0cc      	beq.n	8003ef8 <__swbuf_r+0x28>
 8003f5e:	f04f 37ff 	mov.w	r7, #4294967295
 8003f62:	4638      	mov	r0, r7
 8003f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f66:	bf00      	nop
 8003f68:	0800446c 	.word	0x0800446c
 8003f6c:	0800448c 	.word	0x0800448c
 8003f70:	0800444c 	.word	0x0800444c

08003f74 <_write_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4c07      	ldr	r4, [pc, #28]	; (8003f94 <_write_r+0x20>)
 8003f78:	4605      	mov	r5, r0
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fc fde9 	bl	8000b5a <_write>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_write_r+0x1e>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_write_r+0x1e>
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000144 	.word	0x20000144

08003f98 <__swsetup_r>:
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <__swsetup_r+0xcc>)
 8003f9a:	b570      	push	{r4, r5, r6, lr}
 8003f9c:	681d      	ldr	r5, [r3, #0]
 8003f9e:	4606      	mov	r6, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	b125      	cbz	r5, 8003fae <__swsetup_r+0x16>
 8003fa4:	69ab      	ldr	r3, [r5, #24]
 8003fa6:	b913      	cbnz	r3, 8003fae <__swsetup_r+0x16>
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f7ff fb91 	bl	80036d0 <__sinit>
 8003fae:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <__swsetup_r+0xd0>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d10f      	bne.n	8003fd4 <__swsetup_r+0x3c>
 8003fb4:	686c      	ldr	r4, [r5, #4]
 8003fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	0715      	lsls	r5, r2, #28
 8003fbe:	d42c      	bmi.n	800401a <__swsetup_r+0x82>
 8003fc0:	06d0      	lsls	r0, r2, #27
 8003fc2:	d411      	bmi.n	8003fe8 <__swsetup_r+0x50>
 8003fc4:	2209      	movs	r2, #9
 8003fc6:	6032      	str	r2, [r6, #0]
 8003fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd2:	e03e      	b.n	8004052 <__swsetup_r+0xba>
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <__swsetup_r+0xd4>)
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d101      	bne.n	8003fde <__swsetup_r+0x46>
 8003fda:	68ac      	ldr	r4, [r5, #8]
 8003fdc:	e7eb      	b.n	8003fb6 <__swsetup_r+0x1e>
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <__swsetup_r+0xd8>)
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	bf08      	it	eq
 8003fe4:	68ec      	ldreq	r4, [r5, #12]
 8003fe6:	e7e6      	b.n	8003fb6 <__swsetup_r+0x1e>
 8003fe8:	0751      	lsls	r1, r2, #29
 8003fea:	d512      	bpl.n	8004012 <__swsetup_r+0x7a>
 8003fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fee:	b141      	cbz	r1, 8004002 <__swsetup_r+0x6a>
 8003ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	d002      	beq.n	8003ffe <__swsetup_r+0x66>
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f973 	bl	80042e4 <_free_r>
 8003ffe:	2300      	movs	r3, #0
 8004000:	6363      	str	r3, [r4, #52]	; 0x34
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004008:	81a3      	strh	r3, [r4, #12]
 800400a:	2300      	movs	r3, #0
 800400c:	6063      	str	r3, [r4, #4]
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	f043 0308 	orr.w	r3, r3, #8
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	b94b      	cbnz	r3, 8004032 <__swsetup_r+0x9a>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004028:	d003      	beq.n	8004032 <__swsetup_r+0x9a>
 800402a:	4621      	mov	r1, r4
 800402c:	4630      	mov	r0, r6
 800402e:	f000 f917 	bl	8004260 <__smakebuf_r>
 8004032:	89a2      	ldrh	r2, [r4, #12]
 8004034:	f012 0301 	ands.w	r3, r2, #1
 8004038:	d00c      	beq.n	8004054 <__swsetup_r+0xbc>
 800403a:	2300      	movs	r3, #0
 800403c:	60a3      	str	r3, [r4, #8]
 800403e:	6963      	ldr	r3, [r4, #20]
 8004040:	425b      	negs	r3, r3
 8004042:	61a3      	str	r3, [r4, #24]
 8004044:	6923      	ldr	r3, [r4, #16]
 8004046:	b953      	cbnz	r3, 800405e <__swsetup_r+0xc6>
 8004048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800404c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004050:	d1ba      	bne.n	8003fc8 <__swsetup_r+0x30>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	0792      	lsls	r2, r2, #30
 8004056:	bf58      	it	pl
 8004058:	6963      	ldrpl	r3, [r4, #20]
 800405a:	60a3      	str	r3, [r4, #8]
 800405c:	e7f2      	b.n	8004044 <__swsetup_r+0xac>
 800405e:	2000      	movs	r0, #0
 8004060:	e7f7      	b.n	8004052 <__swsetup_r+0xba>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	0800446c 	.word	0x0800446c
 800406c:	0800448c 	.word	0x0800448c
 8004070:	0800444c 	.word	0x0800444c

08004074 <_close_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4c06      	ldr	r4, [pc, #24]	; (8004090 <_close_r+0x1c>)
 8004078:	2300      	movs	r3, #0
 800407a:	4605      	mov	r5, r0
 800407c:	4608      	mov	r0, r1
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	f7fc fd87 	bl	8000b92 <_close>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_close_r+0x1a>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	b103      	cbz	r3, 800408e <_close_r+0x1a>
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	20000144 	.word	0x20000144

08004094 <__sflush_r>:
 8004094:	898a      	ldrh	r2, [r1, #12]
 8004096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409a:	4605      	mov	r5, r0
 800409c:	0710      	lsls	r0, r2, #28
 800409e:	460c      	mov	r4, r1
 80040a0:	d458      	bmi.n	8004154 <__sflush_r+0xc0>
 80040a2:	684b      	ldr	r3, [r1, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	dc05      	bgt.n	80040b4 <__sflush_r+0x20>
 80040a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	dc02      	bgt.n	80040b4 <__sflush_r+0x20>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040b6:	2e00      	cmp	r6, #0
 80040b8:	d0f9      	beq.n	80040ae <__sflush_r+0x1a>
 80040ba:	2300      	movs	r3, #0
 80040bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040c0:	682f      	ldr	r7, [r5, #0]
 80040c2:	6a21      	ldr	r1, [r4, #32]
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	d032      	beq.n	800412e <__sflush_r+0x9a>
 80040c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	075a      	lsls	r2, r3, #29
 80040ce:	d505      	bpl.n	80040dc <__sflush_r+0x48>
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	1ac0      	subs	r0, r0, r3
 80040d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040d6:	b10b      	cbz	r3, 80040dc <__sflush_r+0x48>
 80040d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040da:	1ac0      	subs	r0, r0, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	4602      	mov	r2, r0
 80040e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040e2:	6a21      	ldr	r1, [r4, #32]
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b0      	blx	r6
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	d106      	bne.n	80040fc <__sflush_r+0x68>
 80040ee:	6829      	ldr	r1, [r5, #0]
 80040f0:	291d      	cmp	r1, #29
 80040f2:	d848      	bhi.n	8004186 <__sflush_r+0xf2>
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <__sflush_r+0x108>)
 80040f6:	40ca      	lsrs	r2, r1
 80040f8:	07d6      	lsls	r6, r2, #31
 80040fa:	d544      	bpl.n	8004186 <__sflush_r+0xf2>
 80040fc:	2200      	movs	r2, #0
 80040fe:	6062      	str	r2, [r4, #4]
 8004100:	04d9      	lsls	r1, r3, #19
 8004102:	6922      	ldr	r2, [r4, #16]
 8004104:	6022      	str	r2, [r4, #0]
 8004106:	d504      	bpl.n	8004112 <__sflush_r+0x7e>
 8004108:	1c42      	adds	r2, r0, #1
 800410a:	d101      	bne.n	8004110 <__sflush_r+0x7c>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b903      	cbnz	r3, 8004112 <__sflush_r+0x7e>
 8004110:	6560      	str	r0, [r4, #84]	; 0x54
 8004112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004114:	602f      	str	r7, [r5, #0]
 8004116:	2900      	cmp	r1, #0
 8004118:	d0c9      	beq.n	80040ae <__sflush_r+0x1a>
 800411a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800411e:	4299      	cmp	r1, r3
 8004120:	d002      	beq.n	8004128 <__sflush_r+0x94>
 8004122:	4628      	mov	r0, r5
 8004124:	f000 f8de 	bl	80042e4 <_free_r>
 8004128:	2000      	movs	r0, #0
 800412a:	6360      	str	r0, [r4, #52]	; 0x34
 800412c:	e7c0      	b.n	80040b0 <__sflush_r+0x1c>
 800412e:	2301      	movs	r3, #1
 8004130:	4628      	mov	r0, r5
 8004132:	47b0      	blx	r6
 8004134:	1c41      	adds	r1, r0, #1
 8004136:	d1c8      	bne.n	80040ca <__sflush_r+0x36>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0c5      	beq.n	80040ca <__sflush_r+0x36>
 800413e:	2b1d      	cmp	r3, #29
 8004140:	d001      	beq.n	8004146 <__sflush_r+0xb2>
 8004142:	2b16      	cmp	r3, #22
 8004144:	d101      	bne.n	800414a <__sflush_r+0xb6>
 8004146:	602f      	str	r7, [r5, #0]
 8004148:	e7b1      	b.n	80040ae <__sflush_r+0x1a>
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004150:	81a3      	strh	r3, [r4, #12]
 8004152:	e7ad      	b.n	80040b0 <__sflush_r+0x1c>
 8004154:	690f      	ldr	r7, [r1, #16]
 8004156:	2f00      	cmp	r7, #0
 8004158:	d0a9      	beq.n	80040ae <__sflush_r+0x1a>
 800415a:	0793      	lsls	r3, r2, #30
 800415c:	680e      	ldr	r6, [r1, #0]
 800415e:	bf08      	it	eq
 8004160:	694b      	ldreq	r3, [r1, #20]
 8004162:	600f      	str	r7, [r1, #0]
 8004164:	bf18      	it	ne
 8004166:	2300      	movne	r3, #0
 8004168:	eba6 0807 	sub.w	r8, r6, r7
 800416c:	608b      	str	r3, [r1, #8]
 800416e:	f1b8 0f00 	cmp.w	r8, #0
 8004172:	dd9c      	ble.n	80040ae <__sflush_r+0x1a>
 8004174:	4643      	mov	r3, r8
 8004176:	463a      	mov	r2, r7
 8004178:	6a21      	ldr	r1, [r4, #32]
 800417a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800417c:	4628      	mov	r0, r5
 800417e:	47b0      	blx	r6
 8004180:	2800      	cmp	r0, #0
 8004182:	dc06      	bgt.n	8004192 <__sflush_r+0xfe>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e78e      	b.n	80040b0 <__sflush_r+0x1c>
 8004192:	4407      	add	r7, r0
 8004194:	eba8 0800 	sub.w	r8, r8, r0
 8004198:	e7e9      	b.n	800416e <__sflush_r+0xda>
 800419a:	bf00      	nop
 800419c:	20400001 	.word	0x20400001

080041a0 <_fflush_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	690b      	ldr	r3, [r1, #16]
 80041a4:	4605      	mov	r5, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	b1db      	cbz	r3, 80041e2 <_fflush_r+0x42>
 80041aa:	b118      	cbz	r0, 80041b4 <_fflush_r+0x14>
 80041ac:	6983      	ldr	r3, [r0, #24]
 80041ae:	b90b      	cbnz	r3, 80041b4 <_fflush_r+0x14>
 80041b0:	f7ff fa8e 	bl	80036d0 <__sinit>
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <_fflush_r+0x48>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d109      	bne.n	80041ce <_fflush_r+0x2e>
 80041ba:	686c      	ldr	r4, [r5, #4]
 80041bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041c0:	b17b      	cbz	r3, 80041e2 <_fflush_r+0x42>
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ca:	f7ff bf63 	b.w	8004094 <__sflush_r>
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <_fflush_r+0x4c>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d101      	bne.n	80041d8 <_fflush_r+0x38>
 80041d4:	68ac      	ldr	r4, [r5, #8]
 80041d6:	e7f1      	b.n	80041bc <_fflush_r+0x1c>
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <_fflush_r+0x50>)
 80041da:	429c      	cmp	r4, r3
 80041dc:	bf08      	it	eq
 80041de:	68ec      	ldreq	r4, [r5, #12]
 80041e0:	e7ec      	b.n	80041bc <_fflush_r+0x1c>
 80041e2:	2000      	movs	r0, #0
 80041e4:	bd38      	pop	{r3, r4, r5, pc}
 80041e6:	bf00      	nop
 80041e8:	0800446c 	.word	0x0800446c
 80041ec:	0800448c 	.word	0x0800448c
 80041f0:	0800444c 	.word	0x0800444c

080041f4 <_lseek_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4c07      	ldr	r4, [pc, #28]	; (8004214 <_lseek_r+0x20>)
 80041f8:	4605      	mov	r5, r0
 80041fa:	4608      	mov	r0, r1
 80041fc:	4611      	mov	r1, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	6022      	str	r2, [r4, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	f7fc fcec 	bl	8000be0 <_lseek>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_lseek_r+0x1e>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	b103      	cbz	r3, 8004212 <_lseek_r+0x1e>
 8004210:	602b      	str	r3, [r5, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	20000144 	.word	0x20000144

08004218 <__swhatbuf_r>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	460e      	mov	r6, r1
 800421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004220:	2900      	cmp	r1, #0
 8004222:	b096      	sub	sp, #88	; 0x58
 8004224:	4614      	mov	r4, r2
 8004226:	461d      	mov	r5, r3
 8004228:	da07      	bge.n	800423a <__swhatbuf_r+0x22>
 800422a:	2300      	movs	r3, #0
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	89b3      	ldrh	r3, [r6, #12]
 8004230:	061a      	lsls	r2, r3, #24
 8004232:	d410      	bmi.n	8004256 <__swhatbuf_r+0x3e>
 8004234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004238:	e00e      	b.n	8004258 <__swhatbuf_r+0x40>
 800423a:	466a      	mov	r2, sp
 800423c:	f000 f8b2 	bl	80043a4 <_fstat_r>
 8004240:	2800      	cmp	r0, #0
 8004242:	dbf2      	blt.n	800422a <__swhatbuf_r+0x12>
 8004244:	9a01      	ldr	r2, [sp, #4]
 8004246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800424a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800424e:	425a      	negs	r2, r3
 8004250:	415a      	adcs	r2, r3
 8004252:	602a      	str	r2, [r5, #0]
 8004254:	e7ee      	b.n	8004234 <__swhatbuf_r+0x1c>
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	2000      	movs	r0, #0
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	b016      	add	sp, #88	; 0x58
 800425e:	bd70      	pop	{r4, r5, r6, pc}

08004260 <__smakebuf_r>:
 8004260:	898b      	ldrh	r3, [r1, #12]
 8004262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004264:	079d      	lsls	r5, r3, #30
 8004266:	4606      	mov	r6, r0
 8004268:	460c      	mov	r4, r1
 800426a:	d507      	bpl.n	800427c <__smakebuf_r+0x1c>
 800426c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	2301      	movs	r3, #1
 8004276:	6163      	str	r3, [r4, #20]
 8004278:	b002      	add	sp, #8
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	ab01      	add	r3, sp, #4
 800427e:	466a      	mov	r2, sp
 8004280:	f7ff ffca 	bl	8004218 <__swhatbuf_r>
 8004284:	9900      	ldr	r1, [sp, #0]
 8004286:	4605      	mov	r5, r0
 8004288:	4630      	mov	r0, r6
 800428a:	f7ff faab 	bl	80037e4 <_malloc_r>
 800428e:	b948      	cbnz	r0, 80042a4 <__smakebuf_r+0x44>
 8004290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004294:	059a      	lsls	r2, r3, #22
 8004296:	d4ef      	bmi.n	8004278 <__smakebuf_r+0x18>
 8004298:	f023 0303 	bic.w	r3, r3, #3
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	e7e3      	b.n	800426c <__smakebuf_r+0xc>
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <__smakebuf_r+0x7c>)
 80042a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	6020      	str	r0, [r4, #0]
 80042ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	9b00      	ldr	r3, [sp, #0]
 80042b4:	6163      	str	r3, [r4, #20]
 80042b6:	9b01      	ldr	r3, [sp, #4]
 80042b8:	6120      	str	r0, [r4, #16]
 80042ba:	b15b      	cbz	r3, 80042d4 <__smakebuf_r+0x74>
 80042bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 f881 	bl	80043c8 <_isatty_r>
 80042c6:	b128      	cbz	r0, 80042d4 <__smakebuf_r+0x74>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	81a3      	strh	r3, [r4, #12]
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	431d      	orrs	r5, r3
 80042d8:	81a5      	strh	r5, [r4, #12]
 80042da:	e7cd      	b.n	8004278 <__smakebuf_r+0x18>
 80042dc:	08003699 	.word	0x08003699

080042e0 <__malloc_lock>:
 80042e0:	4770      	bx	lr

080042e2 <__malloc_unlock>:
 80042e2:	4770      	bx	lr

080042e4 <_free_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4605      	mov	r5, r0
 80042e8:	2900      	cmp	r1, #0
 80042ea:	d045      	beq.n	8004378 <_free_r+0x94>
 80042ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f0:	1f0c      	subs	r4, r1, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfb8      	it	lt
 80042f6:	18e4      	addlt	r4, r4, r3
 80042f8:	f7ff fff2 	bl	80042e0 <__malloc_lock>
 80042fc:	4a1f      	ldr	r2, [pc, #124]	; (800437c <_free_r+0x98>)
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	4610      	mov	r0, r2
 8004302:	b933      	cbnz	r3, 8004312 <_free_r+0x2e>
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6014      	str	r4, [r2, #0]
 8004308:	4628      	mov	r0, r5
 800430a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800430e:	f7ff bfe8 	b.w	80042e2 <__malloc_unlock>
 8004312:	42a3      	cmp	r3, r4
 8004314:	d90c      	bls.n	8004330 <_free_r+0x4c>
 8004316:	6821      	ldr	r1, [r4, #0]
 8004318:	1862      	adds	r2, r4, r1
 800431a:	4293      	cmp	r3, r2
 800431c:	bf04      	itt	eq
 800431e:	681a      	ldreq	r2, [r3, #0]
 8004320:	685b      	ldreq	r3, [r3, #4]
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	bf04      	itt	eq
 8004326:	1852      	addeq	r2, r2, r1
 8004328:	6022      	streq	r2, [r4, #0]
 800432a:	6004      	str	r4, [r0, #0]
 800432c:	e7ec      	b.n	8004308 <_free_r+0x24>
 800432e:	4613      	mov	r3, r2
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	b10a      	cbz	r2, 8004338 <_free_r+0x54>
 8004334:	42a2      	cmp	r2, r4
 8004336:	d9fa      	bls.n	800432e <_free_r+0x4a>
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	1858      	adds	r0, r3, r1
 800433c:	42a0      	cmp	r0, r4
 800433e:	d10b      	bne.n	8004358 <_free_r+0x74>
 8004340:	6820      	ldr	r0, [r4, #0]
 8004342:	4401      	add	r1, r0
 8004344:	1858      	adds	r0, r3, r1
 8004346:	4282      	cmp	r2, r0
 8004348:	6019      	str	r1, [r3, #0]
 800434a:	d1dd      	bne.n	8004308 <_free_r+0x24>
 800434c:	6810      	ldr	r0, [r2, #0]
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	4401      	add	r1, r0
 8004354:	6019      	str	r1, [r3, #0]
 8004356:	e7d7      	b.n	8004308 <_free_r+0x24>
 8004358:	d902      	bls.n	8004360 <_free_r+0x7c>
 800435a:	230c      	movs	r3, #12
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	e7d3      	b.n	8004308 <_free_r+0x24>
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	1821      	adds	r1, r4, r0
 8004364:	428a      	cmp	r2, r1
 8004366:	bf04      	itt	eq
 8004368:	6811      	ldreq	r1, [r2, #0]
 800436a:	6852      	ldreq	r2, [r2, #4]
 800436c:	6062      	str	r2, [r4, #4]
 800436e:	bf04      	itt	eq
 8004370:	1809      	addeq	r1, r1, r0
 8004372:	6021      	streq	r1, [r4, #0]
 8004374:	605c      	str	r4, [r3, #4]
 8004376:	e7c7      	b.n	8004308 <_free_r+0x24>
 8004378:	bd38      	pop	{r3, r4, r5, pc}
 800437a:	bf00      	nop
 800437c:	200000b8 	.word	0x200000b8

08004380 <_read_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4c07      	ldr	r4, [pc, #28]	; (80043a0 <_read_r+0x20>)
 8004384:	4605      	mov	r5, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	2200      	movs	r2, #0
 800438c:	6022      	str	r2, [r4, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc fbc6 	bl	8000b20 <_read>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_read_r+0x1e>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	b103      	cbz	r3, 800439e <_read_r+0x1e>
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000144 	.word	0x20000144

080043a4 <_fstat_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4c07      	ldr	r4, [pc, #28]	; (80043c4 <_fstat_r+0x20>)
 80043a8:	2300      	movs	r3, #0
 80043aa:	4605      	mov	r5, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	f7fc fbfa 	bl	8000baa <_fstat>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d102      	bne.n	80043c0 <_fstat_r+0x1c>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	b103      	cbz	r3, 80043c0 <_fstat_r+0x1c>
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	bd38      	pop	{r3, r4, r5, pc}
 80043c2:	bf00      	nop
 80043c4:	20000144 	.word	0x20000144

080043c8 <_isatty_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4c06      	ldr	r4, [pc, #24]	; (80043e4 <_isatty_r+0x1c>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4605      	mov	r5, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	f7fc fbf9 	bl	8000bca <_isatty>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_isatty_r+0x1a>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_isatty_r+0x1a>
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	20000144 	.word	0x20000144

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr
