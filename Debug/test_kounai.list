
test_kounai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003308  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c0  080034c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034c0  080034c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034c0  080034c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080034d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080034d4  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e46  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000150a  00000000  00000000  00028e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002a390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f0  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001677a  00000000  00000000  0002b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073a5  00000000  00000000  00041da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008232a  00000000  00000000  00049147  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002790  00000000  00000000  000cb4ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003478 	.word	0x08003478

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003478 	.word	0x08003478

080001c8 <SW1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int SW1()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d2:	f000 ffb1 	bl	8001138 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	bd80      	pop	{r7, pc}

080001dc <SW2>:

int SW2()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80001e0:	2120      	movs	r1, #32
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f000 ffa7 	bl	8001138 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <SW4>:
{
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
}

int SW4()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 80001f4:	2110      	movs	r1, #16
 80001f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fa:	f000 ff9d 	bl	8001138 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
}
 8000200:	4618      	mov	r0, r3
 8000202:	bd80      	pop	{r7, pc}

08000204 <SW6>:
{
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
}

int SW6()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000208:	2101      	movs	r1, #1
 800020a:	4803      	ldr	r0, [pc, #12]	; (8000218 <SW6+0x14>)
 800020c:	f000 ff94 	bl	8001138 <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	48000400 	.word	0x48000400

0800021c <SW7>:

int SW7()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12);
 8000220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f000 ff86 	bl	8001138 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
}
 800022e:	4618      	mov	r0, r3
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <SW8>:

int SW8()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
return 	HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1);
 8000238:	2102      	movs	r1, #2
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <SW8+0x14>)
 800023c:	f000 ff7c 	bl	8001138 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
}
 8000242:	4618      	mov	r0, r3
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	48000400 	.word	0x48000400

0800024c <motor1>:

void motor1(int dire,int duty)//右モーター
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	if(dire==0){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d116      	bne.n	800028a <motor1+0x3e>
		sConfigOC.Pulse = duty;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	4a27      	ldr	r2, [pc, #156]	; (80002fc <motor1+0xb0>)
 8000260:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000262:	2200      	movs	r2, #0
 8000264:	4925      	ldr	r1, [pc, #148]	; (80002fc <motor1+0xb0>)
 8000266:	4826      	ldr	r0, [pc, #152]	; (8000300 <motor1+0xb4>)
 8000268:	f002 fa44 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <motor1+0x2a>
		 {
		 Error_Handler();
 8000272:	f000 fb49 	bl	8000908 <Error_Handler>
		 }
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000276:	2100      	movs	r1, #0
 8000278:	4821      	ldr	r0, [pc, #132]	; (8000300 <motor1+0xb4>)
 800027a:	f002 f9e9 	bl	8002650 <HAL_TIM_PWM_Start>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d036      	beq.n	80002f2 <motor1+0xa6>
				   					{
				   						Error_Handler();
 8000284:	f000 fb40 	bl	8000908 <Error_Handler>
		 {
		 Error_Handler();
		 }
			}

}
 8000288:	e033      	b.n	80002f2 <motor1+0xa6>
	else if (dire==1){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d116      	bne.n	80002be <motor1+0x72>
		sConfigOC.Pulse = duty;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <motor1+0xb0>)
 8000294:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000296:	2204      	movs	r2, #4
 8000298:	4918      	ldr	r1, [pc, #96]	; (80002fc <motor1+0xb0>)
 800029a:	4819      	ldr	r0, [pc, #100]	; (8000300 <motor1+0xb4>)
 800029c:	f002 fa2a 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <motor1+0x5e>
		 Error_Handler();
 80002a6:	f000 fb2f 	bl	8000908 <Error_Handler>
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80002aa:	2104      	movs	r1, #4
 80002ac:	4814      	ldr	r0, [pc, #80]	; (8000300 <motor1+0xb4>)
 80002ae:	f002 f9cf 	bl	8002650 <HAL_TIM_PWM_Start>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d01c      	beq.n	80002f2 <motor1+0xa6>
			   							Error_Handler();
 80002b8:	f000 fb26 	bl	8000908 <Error_Handler>
}
 80002bc:	e019      	b.n	80002f2 <motor1+0xa6>
	else if(dire==2)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d116      	bne.n	80002f2 <motor1+0xa6>
		sConfigOC.Pulse = 0;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <motor1+0xb0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002ca:	2200      	movs	r2, #0
 80002cc:	490b      	ldr	r1, [pc, #44]	; (80002fc <motor1+0xb0>)
 80002ce:	480c      	ldr	r0, [pc, #48]	; (8000300 <motor1+0xb4>)
 80002d0:	f002 fa10 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <motor1+0x92>
		 Error_Handler();
 80002da:	f000 fb15 	bl	8000908 <Error_Handler>
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002de:	2200      	movs	r2, #0
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <motor1+0xb0>)
 80002e2:	4807      	ldr	r0, [pc, #28]	; (8000300 <motor1+0xb4>)
 80002e4:	f002 fa06 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <motor1+0xa6>
		 Error_Handler();
 80002ee:	f000 fb0b 	bl	8000908 <Error_Handler>
}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000034 	.word	0x20000034
 8000300:	20000050 	.word	0x20000050

08000304 <motor2>:
void motor2(int dire,int duty)//右モーター
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	if(dire==0){
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d116      	bne.n	8000342 <motor2+0x3e>
		sConfigOC.Pulse = duty;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <motor2+0xb0>)
 8000318:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800031a:	2200      	movs	r2, #0
 800031c:	4925      	ldr	r1, [pc, #148]	; (80003b4 <motor2+0xb0>)
 800031e:	4826      	ldr	r0, [pc, #152]	; (80003b8 <motor2+0xb4>)
 8000320:	f002 f9e8 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <motor2+0x2a>
		 {
		 Error_Handler();
 800032a:	f000 faed 	bl	8000908 <Error_Handler>
		 }
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800032e:	2100      	movs	r1, #0
 8000330:	4822      	ldr	r0, [pc, #136]	; (80003bc <motor2+0xb8>)
 8000332:	f002 f98d 	bl	8002650 <HAL_TIM_PWM_Start>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d036      	beq.n	80003aa <motor2+0xa6>
				   					{
				   						Error_Handler();
 800033c:	f000 fae4 	bl	8000908 <Error_Handler>
		 {
		 Error_Handler();
		 }
			}

}
 8000340:	e033      	b.n	80003aa <motor2+0xa6>
	else if (dire==1){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d116      	bne.n	8000376 <motor2+0x72>
		sConfigOC.Pulse = duty;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <motor2+0xb0>)
 800034c:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800034e:	2204      	movs	r2, #4
 8000350:	4918      	ldr	r1, [pc, #96]	; (80003b4 <motor2+0xb0>)
 8000352:	4819      	ldr	r0, [pc, #100]	; (80003b8 <motor2+0xb4>)
 8000354:	f002 f9ce 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <motor2+0x5e>
		 Error_Handler();
 800035e:	f000 fad3 	bl	8000908 <Error_Handler>
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8000362:	2104      	movs	r1, #4
 8000364:	4815      	ldr	r0, [pc, #84]	; (80003bc <motor2+0xb8>)
 8000366:	f002 f973 	bl	8002650 <HAL_TIM_PWM_Start>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d01c      	beq.n	80003aa <motor2+0xa6>
			   							Error_Handler();
 8000370:	f000 faca 	bl	8000908 <Error_Handler>
}
 8000374:	e019      	b.n	80003aa <motor2+0xa6>
	else if(dire==2)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d116      	bne.n	80003aa <motor2+0xa6>
		sConfigOC.Pulse = 0;
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <motor2+0xb0>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000382:	2200      	movs	r2, #0
 8000384:	490b      	ldr	r1, [pc, #44]	; (80003b4 <motor2+0xb0>)
 8000386:	480c      	ldr	r0, [pc, #48]	; (80003b8 <motor2+0xb4>)
 8000388:	f002 f9b4 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <motor2+0x92>
		 Error_Handler();
 8000392:	f000 fab9 	bl	8000908 <Error_Handler>
		 if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000396:	2200      	movs	r2, #0
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <motor2+0xb0>)
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <motor2+0xb4>)
 800039c:	f002 f9aa 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <motor2+0xa6>
		 Error_Handler();
 80003a6:	f000 faaf 	bl	8000908 <Error_Handler>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000034 	.word	0x20000034
 80003b8:	20000090 	.word	0x20000090
 80003bc:	20000050 	.word	0x20000050

080003c0 <motor3>:
void motor3(int dire,int duty)//右モーター
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	sConfigOC.Pulse = duty;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	4a28      	ldr	r2, [pc, #160]	; (8000470 <motor3+0xb0>)
 80003ce:	6053      	str	r3, [r2, #4]
	if(dire==0){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d113      	bne.n	80003fe <motor3+0x3e>
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003d6:	2208      	movs	r2, #8
 80003d8:	4925      	ldr	r1, [pc, #148]	; (8000470 <motor3+0xb0>)
 80003da:	4826      	ldr	r0, [pc, #152]	; (8000474 <motor3+0xb4>)
 80003dc:	f002 f98a 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <motor3+0x2a>
		 {
		 Error_Handler();
 80003e6:	f000 fa8f 	bl	8000908 <Error_Handler>
		 }
		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 80003ea:	2108      	movs	r1, #8
 80003ec:	4821      	ldr	r0, [pc, #132]	; (8000474 <motor3+0xb4>)
 80003ee:	f002 f92f 	bl	8002650 <HAL_TIM_PWM_Start>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d036      	beq.n	8000466 <motor3+0xa6>
				   					{
				   						Error_Handler();
 80003f8:	f000 fa86 	bl	8000908 <Error_Handler>
		 {
		 Error_Handler();
		 }
			}

}
 80003fc:	e033      	b.n	8000466 <motor3+0xa6>
	else if (dire==1){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d116      	bne.n	8000432 <motor3+0x72>
		sConfigOC.Pulse = duty;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	4a1a      	ldr	r2, [pc, #104]	; (8000470 <motor3+0xb0>)
 8000408:	6053      	str	r3, [r2, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800040a:	220c      	movs	r2, #12
 800040c:	4918      	ldr	r1, [pc, #96]	; (8000470 <motor3+0xb0>)
 800040e:	4819      	ldr	r0, [pc, #100]	; (8000474 <motor3+0xb4>)
 8000410:	f002 f970 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <motor3+0x5e>
		 Error_Handler();
 800041a:	f000 fa75 	bl	8000908 <Error_Handler>
			   		if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800041e:	210c      	movs	r1, #12
 8000420:	4814      	ldr	r0, [pc, #80]	; (8000474 <motor3+0xb4>)
 8000422:	f002 f915 	bl	8002650 <HAL_TIM_PWM_Start>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d01c      	beq.n	8000466 <motor3+0xa6>
			   							Error_Handler();
 800042c:	f000 fa6c 	bl	8000908 <Error_Handler>
}
 8000430:	e019      	b.n	8000466 <motor3+0xa6>
	else if(dire==2)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d116      	bne.n	8000466 <motor3+0xa6>
		sConfigOC.Pulse = 0;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <motor3+0xb0>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800043e:	2208      	movs	r2, #8
 8000440:	490b      	ldr	r1, [pc, #44]	; (8000470 <motor3+0xb0>)
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <motor3+0xb4>)
 8000444:	f002 f956 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <motor3+0x92>
		 Error_Handler();
 800044e:	f000 fa5b 	bl	8000908 <Error_Handler>
		 if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000452:	220c      	movs	r2, #12
 8000454:	4906      	ldr	r1, [pc, #24]	; (8000470 <motor3+0xb0>)
 8000456:	4807      	ldr	r0, [pc, #28]	; (8000474 <motor3+0xb4>)
 8000458:	f002 f94c 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <motor3+0xa6>
		 Error_Handler();
 8000462:	f000 fa51 	bl	8000908 <Error_Handler>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000034 	.word	0x20000034
 8000474:	20000050 	.word	0x20000050

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f000 fb7c 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f852 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f000 f9ee 	bl	8000864 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000488:	f000 f8a6 	bl	80005d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800048c:	f000 f968 	bl	8000760 <MX_TIM2_Init>
	 HAL_Delay(1000);
*/
	 //motor1の挙動 �?右


	 	  if(SW4()==0)
 8000490:	f7ff feae 	bl	80001f0 <SW4>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d104      	bne.n	80004a4 <main+0x2c>
	 	  	  {
	 	  		  //printf("sw4\n");
	 	  		 motor1(1,40);
 800049a:	2128      	movs	r1, #40	; 0x28
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fed5 	bl	800024c <motor1>
 80004a2:	e00d      	b.n	80004c0 <main+0x48>
	 	  	  }
	 	  	  else if(SW2()==0)
 80004a4:	f7ff fe9a 	bl	80001dc <SW2>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d104      	bne.n	80004b8 <main+0x40>
	 	  	 	  {
	 	  	 		//  printf("sw2\n");
	 	  	 		  motor1(0,40);
 80004ae:	2128      	movs	r1, #40	; 0x28
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fecb 	bl	800024c <motor1>
 80004b6:	e003      	b.n	80004c0 <main+0x48>
	 	  	 	  }
	 	  	  else
	 	  	  {
	 	  		  motor1(2,0);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2002      	movs	r0, #2
 80004bc:	f7ff fec6 	bl	800024c <motor1>
	 	  	  }


	 	  	//motor3挙動 左
	 	  	   if(SW8()==0)
 80004c0:	f7ff feb8 	bl	8000234 <SW8>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d104      	bne.n	80004d4 <main+0x5c>
	 	  	  {

	 	  		  motor3(1,30);
 80004ca:	211e      	movs	r1, #30
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff ff77 	bl	80003c0 <motor3>
 80004d2:	e00d      	b.n	80004f0 <main+0x78>
	 	  	  }

	 	  	   else if(SW6()==0)
 80004d4:	f7ff fe96 	bl	8000204 <SW6>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d104      	bne.n	80004e8 <main+0x70>
	 	  	 	  {
	 	  	 		  motor3(0,30);
 80004de:	211e      	movs	r1, #30
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff ff6d 	bl	80003c0 <motor3>
 80004e6:	e003      	b.n	80004f0 <main+0x78>
	 	  	 	  }
	 	  	   else{
	 	  		   motor3(2,0);
 80004e8:	2100      	movs	r1, #0
 80004ea:	2002      	movs	r0, #2
 80004ec:	f7ff ff68 	bl	80003c0 <motor3>
	 	  	   }

	 	  	//motor2挙動 a-m
	 	  	   if(SW1()==0)
 80004f0:	f7ff fe6a 	bl	80001c8 <SW1>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d104      	bne.n	8000504 <main+0x8c>
	 	  	  {
	 	  		motor2(1,15);
 80004fa:	210f      	movs	r1, #15
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ff01 	bl	8000304 <motor2>
 8000502:	e00d      	b.n	8000520 <main+0xa8>
	 	  	  }

	 	  	   else if(SW7()==0)
 8000504:	f7ff fe8a 	bl	800021c <SW7>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <main+0xa0>
	 	  	  {
	 	  		  motor2(0,15);
 800050e:	210f      	movs	r1, #15
 8000510:	2000      	movs	r0, #0
 8000512:	f7ff fef7 	bl	8000304 <motor2>
 8000516:	e003      	b.n	8000520 <main+0xa8>
	 	  	  }
	 	  	   else{
	 	  		   motor2(2,0);
 8000518:	2100      	movs	r1, #0
 800051a:	2002      	movs	r0, #2
 800051c:	f7ff fef2 	bl	8000304 <motor2>
	 	  	   }

	 	  HAL_Delay(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fb8f 	bl	8000c44 <HAL_Delay>
	 	  if(SW4()==0)
 8000526:	e7b3      	b.n	8000490 <main+0x18>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000532:	2228      	movs	r2, #40	; 0x28
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 ff96 	bl	8003468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]
 800055a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000570:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000574:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fdf4 	bl	8001168 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000586:	f000 f9bf 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fce7 	bl	8001f78 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b0:	f000 f9aa 	bl	8000908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 febf 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005cc:	f000 f99c 	bl	8000908 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	222c      	movs	r2, #44	; 0x2c
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 ff38 	bl	8003468 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <MX_TIM1_Init+0x178>)
 80005fa:	4a56      	ldr	r2, [pc, #344]	; (8000754 <MX_TIM1_Init+0x17c>)
 80005fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80005fe:	4b54      	ldr	r3, [pc, #336]	; (8000750 <MX_TIM1_Init+0x178>)
 8000600:	220f      	movs	r2, #15
 8000602:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b52      	ldr	r3, [pc, #328]	; (8000750 <MX_TIM1_Init+0x178>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800060a:	4b51      	ldr	r3, [pc, #324]	; (8000750 <MX_TIM1_Init+0x178>)
 800060c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000610:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <MX_TIM1_Init+0x178>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <MX_TIM1_Init+0x178>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <MX_TIM1_Init+0x178>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000624:	484a      	ldr	r0, [pc, #296]	; (8000750 <MX_TIM1_Init+0x178>)
 8000626:	f001 ffb3 	bl	8002590 <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 f96a 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800063a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800063e:	4619      	mov	r1, r3
 8000640:	4843      	ldr	r0, [pc, #268]	; (8000750 <MX_TIM1_Init+0x178>)
 8000642:	f002 f96f 	bl	8002924 <HAL_TIM_ConfigClockSource>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800064c:	f000 f95c 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000650:	483f      	ldr	r0, [pc, #252]	; (8000750 <MX_TIM1_Init+0x178>)
 8000652:	f001 ffd2 	bl	80025fa <HAL_TIM_PWM_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800065c:	f000 f954 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_TIM1_Init+0x180>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000666:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <MX_TIM1_Init+0x180>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <MX_TIM1_Init+0x180>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000672:	4939      	ldr	r1, [pc, #228]	; (8000758 <MX_TIM1_Init+0x180>)
 8000674:	4836      	ldr	r0, [pc, #216]	; (8000750 <MX_TIM1_Init+0x178>)
 8000676:	f002 fded 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000680:	f000 f942 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <MX_TIM1_Init+0x184>)
 8000686:	2260      	movs	r2, #96	; 0x60
 8000688:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800068a:	4b34      	ldr	r3, [pc, #208]	; (800075c <MX_TIM1_Init+0x184>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	4b32      	ldr	r3, [pc, #200]	; (800075c <MX_TIM1_Init+0x184>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <MX_TIM1_Init+0x184>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <MX_TIM1_Init+0x184>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <MX_TIM1_Init+0x184>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <MX_TIM1_Init+0x184>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ae:	2200      	movs	r2, #0
 80006b0:	492a      	ldr	r1, [pc, #168]	; (800075c <MX_TIM1_Init+0x184>)
 80006b2:	4827      	ldr	r0, [pc, #156]	; (8000750 <MX_TIM1_Init+0x178>)
 80006b4:	f002 f81e 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80006be:	f000 f923 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c2:	2204      	movs	r2, #4
 80006c4:	4925      	ldr	r1, [pc, #148]	; (800075c <MX_TIM1_Init+0x184>)
 80006c6:	4822      	ldr	r0, [pc, #136]	; (8000750 <MX_TIM1_Init+0x178>)
 80006c8:	f002 f814 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006d2:	f000 f919 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d6:	2208      	movs	r2, #8
 80006d8:	4920      	ldr	r1, [pc, #128]	; (800075c <MX_TIM1_Init+0x184>)
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <MX_TIM1_Init+0x178>)
 80006dc:	f002 f80a 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80006e6:	f000 f90f 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ea:	220c      	movs	r2, #12
 80006ec:	491b      	ldr	r1, [pc, #108]	; (800075c <MX_TIM1_Init+0x184>)
 80006ee:	4818      	ldr	r0, [pc, #96]	; (8000750 <MX_TIM1_Init+0x178>)
 80006f0:	f002 f800 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80006fa:	f000 f905 	bl	8000908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000716:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_TIM1_Init+0x178>)
 8000734:	f002 fdfc 	bl	8003330 <HAL_TIMEx_ConfigBreakDeadTime>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 800073e:	f000 f8e3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM1_Init+0x178>)
 8000744:	f000 f93e 	bl	80009c4 <HAL_TIM_MspPostInit>

}
 8000748:	bf00      	nop
 800074a:	3740      	adds	r7, #64	; 0x40
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000050 	.word	0x20000050
 8000754:	40012c00 	.word	0x40012c00
 8000758:	20000028 	.word	0x20000028
 800075c:	20000034 	.word	0x20000034

08000760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_TIM2_Init+0x100>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_TIM2_Init+0x100>)
 800079c:	220f      	movs	r2, #15
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_TIM2_Init+0x100>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_TIM2_Init+0x100>)
 80007a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_TIM2_Init+0x100>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_TIM2_Init+0x100>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4829      	ldr	r0, [pc, #164]	; (8000860 <MX_TIM2_Init+0x100>)
 80007bc:	f001 fee8 	bl	8002590 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f89f 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4822      	ldr	r0, [pc, #136]	; (8000860 <MX_TIM2_Init+0x100>)
 80007d8:	f002 f8a4 	bl	8002924 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007e2:	f000 f891 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <MX_TIM2_Init+0x100>)
 80007e8:	f001 ff07 	bl	80025fa <HAL_TIM_PWM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007f2:	f000 f889 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4816      	ldr	r0, [pc, #88]	; (8000860 <MX_TIM2_Init+0x100>)
 8000806:	f002 fd25 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000810:	f000 f87a 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_TIM2_Init+0x100>)
 800082c:	f001 ff62 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000836:	f000 f867 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM2_Init+0x100>)
 8000842:	f001 ff57 	bl	80026f4 <HAL_TIM_PWM_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800084c:	f000 f85c 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM2_Init+0x100>)
 8000852:	f000 f8b7 	bl	80009c4 <HAL_TIM_MspPostInit>

}
 8000856:	bf00      	nop
 8000858:	3738      	adds	r7, #56	; 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000090 	.word	0x20000090

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_GPIO_Init+0x9c>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b4:	6153      	str	r3, [r2, #20]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80008c2:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80008c6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fabb 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008de:	2303      	movs	r3, #3
 80008e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_GPIO_Init+0xa0>)
 80008f2:	f000 faaf 	bl	8000e54 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_TIM_PWM_MspInit+0x5c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10c      	bne.n	800098c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_TIM_PWM_MspInit+0x60>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <HAL_TIM_PWM_MspInit+0x60>)
 8000978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_TIM_PWM_MspInit+0x60>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	e010      	b.n	80009ae <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000994:	d10b      	bne.n	80009ae <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_TIM_PWM_MspInit+0x60>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_PWM_MspInit+0x60>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_TIM_PWM_MspInit+0x60>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40012c00 	.word	0x40012c00
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a2c      	ldr	r2, [pc, #176]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d130      	bne.n	8000a48 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80009fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a10:	2306      	movs	r3, #6
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fa19 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000a34:	230b      	movs	r3, #11
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fa07 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a46:	e021      	b.n	8000a8c <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a50:	d11c      	bne.n	8000a8c <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 f9e4 	bl	8000e54 <HAL_GPIO_Init>
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40012c00 	.word	0x40012c00
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f888 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <SystemInit+0x28>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <SystemInit+0x28>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SystemInit+0x28>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	609a      	str	r2, [r3, #8]
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b2a:	e003      	b.n	8000b34 <LoopCopyDataInit>

08000b2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b32:	3104      	adds	r1, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b3c:	d3f6      	bcc.n	8000b2c <CopyDataInit>
	ldr	r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b40:	e002      	b.n	8000b48 <LoopFillZerobss>

08000b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b44:	f842 3b04 	str.w	r3, [r2], #4

08000b48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <LoopForever+0x16>)
	cmp	r2, r3
 8000b4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b4c:	d3f9      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b4e:	f7ff ffd3 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f002 fc65 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b56:	f7ff fc8f 	bl	8000478 <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b5c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000b60:	080034c8 	.word	0x080034c8
	ldr	r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b68:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f92f 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fec0 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f939 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f90f 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	200000d0 	.word	0x200000d0

08000c2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	200000d0 	.word	0x200000d0

08000c44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_Delay+0x40>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000008 	.word	0x20000008

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff47 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff5c 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff8e 	bl	8000d40 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffb0 	bl	8000da8 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e14e      	b.n	8001102 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8140 	beq.w	80010fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x38>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	6939      	ldr	r1, [r7, #16]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d00b      	beq.n	8000f28 <HAL_GPIO_Init+0xd4>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1c:	2b11      	cmp	r3, #17
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b12      	cmp	r3, #18
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 809a 	beq.w	80010fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b55      	ldr	r3, [pc, #340]	; (8001120 <HAL_GPIO_Init+0x2cc>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a54      	ldr	r2, [pc, #336]	; (8001120 <HAL_GPIO_Init+0x2cc>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b52      	ldr	r3, [pc, #328]	; (8001120 <HAL_GPIO_Init+0x2cc>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe0:	4a50      	ldr	r2, [pc, #320]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x1e0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2d4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1dc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a45      	ldr	r2, [pc, #276]	; (800112c <HAL_GPIO_Init+0x2d8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1d8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a44      	ldr	r2, [pc, #272]	; (8001130 <HAL_GPIO_Init+0x2dc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1d4>
 8001024:	2303      	movs	r3, #3
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 8001028:	2305      	movs	r3, #5
 800102a:	e004      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 800102c:	2302      	movs	r3, #2
 800102e:	e002      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 8001034:	2300      	movs	r3, #0
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	f002 0203 	and.w	r2, r2, #3
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4093      	lsls	r3, r2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001046:	4937      	ldr	r1, [pc, #220]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a2:	4a24      	ldr	r2, [pc, #144]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	f47f aea9 	bne.w	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000
 8001128:	48000400 	.word	0x48000400
 800112c:	48000800 	.word	0x48000800
 8001130:	48000c00 	.word	0x48000c00
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e001      	b.n	800115a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800116e:	af00      	add	r7, sp, #0
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	f000 bef4 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 816a 	beq.w	8001466 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001192:	4bb3      	ldr	r3, [pc, #716]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b04      	cmp	r3, #4
 800119c:	d00c      	beq.n	80011b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119e:	4bb0      	ldr	r3, [pc, #704]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d159      	bne.n	800125e <HAL_RCC_OscConfig+0xf6>
 80011aa:	4bad      	ldr	r3, [pc, #692]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b6:	d152      	bne.n	800125e <HAL_RCC_OscConfig+0xf6>
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	fab3 f383 	clz	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_OscConfig+0x82>
 80011e4:	4b9e      	ldr	r3, [pc, #632]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0xae>
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001202:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001206:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001212:	4b93      	ldr	r3, [pc, #588]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800121e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800122a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800122e:	fab2 f282 	clz	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f042 0220 	orr.w	r2, r2, #32
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f002 021f 	and.w	r2, r2, #31
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 810c 	beq.w	8001464 <HAL_RCC_OscConfig+0x2fc>
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 8106 	bne.w	8001464 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	f000 be86 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x110>
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7c      	ldr	r2, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e030      	b.n	80012da <HAL_RCC_OscConfig+0x172>
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x134>
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a76      	ldr	r2, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b74      	ldr	r3, [pc, #464]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a73      	ldr	r2, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01e      	b.n	80012da <HAL_RCC_OscConfig+0x172>
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x15a>
 80012a8:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6c      	ldr	r2, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a69      	ldr	r2, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x172>
 80012c2:	4b67      	ldr	r3, [pc, #412]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a66      	ldr	r2, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a63      	ldr	r2, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012da:	4b61      	ldr	r3, [pc, #388]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	f023 020f 	bic.w	r2, r3, #15
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	495d      	ldr	r1, [pc, #372]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d059      	beq.n	80013ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc98 	bl	8000c2c <HAL_GetTick>
 80012fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001302:	f7ff fc93 	bl	8000c2c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d902      	bls.n	8001318 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	f000 be29 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800132c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x1e2>
 8001344:	4b46      	ldr	r3, [pc, #280]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x20e>
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001366:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800137a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800137e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800138a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800138e:	fab2 f282 	clz	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0ab      	beq.n	8001302 <HAL_RCC_OscConfig+0x19a>
 80013aa:	e05c      	b.n	8001466 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc3e 	bl	8000c2c <HAL_GetTick>
 80013b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b6:	f7ff fc39 	bl	8000c2c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d902      	bls.n	80013cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f000 bdcf 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>
 80013cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d102      	bne.n	80013fe <HAL_RCC_OscConfig+0x296>
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x2c2>
 80013fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001402:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001416:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800141a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_RCC_OscConfig+0x2f8>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001432:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800143e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ab      	bne.n	80013b6 <HAL_RCC_OscConfig+0x24e>
 800145e:	e002      	b.n	8001466 <HAL_RCC_OscConfig+0x2fe>
 8001460:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 816f 	beq.w	8001754 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001476:	4bd0      	ldr	r3, [pc, #832]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001482:	4bcd      	ldr	r3, [pc, #820]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b08      	cmp	r3, #8
 800148c:	d16c      	bne.n	8001568 <HAL_RCC_OscConfig+0x400>
 800148e:	4bca      	ldr	r3, [pc, #808]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d166      	bne.n	8001568 <HAL_RCC_OscConfig+0x400>
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d102      	bne.n	80014ca <HAL_RCC_OscConfig+0x362>
 80014c4:	4bbc      	ldr	r3, [pc, #752]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	e013      	b.n	80014f2 <HAL_RCC_OscConfig+0x38a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014ee:	4bb2      	ldr	r3, [pc, #712]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	2202      	movs	r2, #2
 80014f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014fc:	fa92 f2a2 	rbit	r2, r2
 8001500:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001504:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001508:	fab2 f282 	clz	r2, r2
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	f042 0220 	orr.w	r2, r2, #32
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	f002 021f 	and.w	r2, r2, #31
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x3cc>
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d002      	beq.n	8001534 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 bd1b 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4ba0      	ldr	r3, [pc, #640]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	21f8      	movs	r1, #248	; 0xf8
 8001544:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800154c:	fa91 f1a1 	rbit	r1, r1
 8001550:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001554:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001558:	fab1 f181 	clz	r1, r1
 800155c:	b2c9      	uxtb	r1, r1
 800155e:	408b      	lsls	r3, r1
 8001560:	4995      	ldr	r1, [pc, #596]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	e0f5      	b.n	8001754 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8085 	beq.w	800167e <HAL_RCC_OscConfig+0x516>
 8001574:	2301      	movs	r3, #1
 8001576:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001586:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001594:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	461a      	mov	r2, r3
 800159c:	2301      	movs	r3, #1
 800159e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb44 	bl	8000c2c <HAL_GetTick>
 80015a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb3f 	bl	8000c2c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d902      	bls.n	80015c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f000 bcd5 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	095b      	lsrs	r3, r3, #5
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x488>
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	e013      	b.n	8001618 <HAL_RCC_OscConfig+0x4b0>
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001608:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2202      	movs	r2, #2
 800161a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800161e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001622:	fa92 f2a2 	rbit	r2, r2
 8001626:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800162a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800162e:	fab2 f282 	clz	r2, r2
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	f042 0220 	orr.w	r2, r2, #32
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	f002 021f 	and.w	r2, r2, #31
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0af      	beq.n	80015aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	21f8      	movs	r1, #248	; 0xf8
 800165a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001662:	fa91 f1a1 	rbit	r1, r1
 8001666:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800166a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800166e:	fab1 f181 	clz	r1, r1
 8001672:	b2c9      	uxtb	r1, r1
 8001674:	408b      	lsls	r3, r1
 8001676:	4950      	ldr	r1, [pc, #320]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e06a      	b.n	8001754 <HAL_RCC_OscConfig+0x5ec>
 800167e:	2301      	movs	r3, #1
 8001680:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001690:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800169e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	461a      	mov	r2, r3
 80016a6:	2300      	movs	r3, #0
 80016a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fabf 	bl	8000c2c <HAL_GetTick>
 80016ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff faba 	bl	8000c2c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d902      	bls.n	80016ca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f000 bc50 	b.w	8001f6a <HAL_RCC_OscConfig+0xe02>
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x592>
 80016f4:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e013      	b.n	8001722 <HAL_RCC_OscConfig+0x5ba>
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001712:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <HAL_RCC_OscConfig+0x650>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2202      	movs	r2, #2
 8001724:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001728:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800172c:	fa92 f2a2 	rbit	r2, r2
 8001730:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001734:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1af      	bne.n	80016b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80da 	beq.w	8001918 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d069      	beq.n	8001842 <HAL_RCC_OscConfig+0x6da>
 800176e:	2301      	movs	r3, #1
 8001770:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x654>)
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	461a      	mov	r2, r3
 8001794:	2301      	movs	r3, #1
 8001796:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fa48 	bl	8000c2c <HAL_GetTick>
 800179c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a0:	e00e      	b.n	80017c0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fa43 	bl	8000c2c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d906      	bls.n	80017c0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e3d9      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	10908120 	.word	0x10908120
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001800:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4ba5      	ldr	r3, [pc, #660]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001806:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800180a:	2102      	movs	r1, #2
 800180c:	6019      	str	r1, [r3, #0]
 800180e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f1a3 	rbit	r1, r3
 8001818:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800181c:	6019      	str	r1, [r3, #0]
  return result;
 800181e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0b0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x63a>
 8001840:	e06a      	b.n	8001918 <HAL_RCC_OscConfig+0x7b0>
 8001842:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001858:	601a      	str	r2, [r3, #0]
  return result;
 800185a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800185e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	4b8c      	ldr	r3, [pc, #560]	; (8001a9c <HAL_RCC_OscConfig+0x934>)
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	461a      	mov	r2, r3
 8001870:	2300      	movs	r3, #0
 8001872:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff f9da 	bl	8000c2c <HAL_GetTick>
 8001878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	e009      	b.n	8001892 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff f9d5 	bl	8000c2c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e36b      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001892:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80018dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018e2:	2102      	movs	r1, #2
 80018e4:	6019      	str	r1, [r3, #0]
 80018e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f1a3 	rbit	r1, r3
 80018f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018f4:	6019      	str	r1, [r3, #0]
  return result;
 80018f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1b2      	bne.n	800187e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8158 	beq.w	8001bd8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b54      	ldr	r3, [pc, #336]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_RCC_OscConfig+0x938>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11a      	bne.n	80019a2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x938>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <HAL_RCC_OscConfig+0x938>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7ff f958 	bl	8000c2c <HAL_GetTick>
 800197c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff f953 	bl	8000c2c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e2e9      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_RCC_OscConfig+0x938>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ef      	beq.n	8001982 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x852>
 80019ac:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e02f      	b.n	8001a1a <HAL_RCC_OscConfig+0x8b2>
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x876>
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a33      	ldr	r2, [pc, #204]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	6213      	str	r3, [r2, #32]
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019d6:	f023 0304 	bic.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	e01d      	b.n	8001a1a <HAL_RCC_OscConfig+0x8b2>
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x89a>
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a2a      	ldr	r2, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0x8b2>
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d06b      	beq.n	8001afc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff f902 	bl	8000c2c <HAL_GetTick>
 8001a28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff f8fd 	bl	8000c2c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e291      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001a46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a74:	601a      	str	r2, [r3, #0]
  return result;
 8001a76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x93c>
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <HAL_RCC_OscConfig+0x930>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x958>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	10908120 	.word	0x10908120
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4bbb      	ldr	r3, [pc, #748]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	6011      	str	r1, [r2, #0]
 8001ac8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	fa92 f1a2 	rbit	r1, r2
 8001ad2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ad6:	6011      	str	r1, [r2, #0]
  return result;
 8001ad8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d099      	beq.n	8001a2e <HAL_RCC_OscConfig+0x8c6>
 8001afa:	e063      	b.n	8001bc4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff f896 	bl	8000c2c <HAL_GetTick>
 8001b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f891 	bl	8000c2c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e225      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001b1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b4c:	601a      	str	r2, [r3, #0]
  return result;
 8001b4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_OscConfig+0xa06>
 8001b68:	4b90      	ldr	r3, [pc, #576]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	e00d      	b.n	8001b8a <HAL_RCC_OscConfig+0xa22>
 8001b6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b72:	2202      	movs	r2, #2
 8001b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f2a3 	rbit	r2, r3
 8001b80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b8e:	2102      	movs	r1, #2
 8001b90:	6011      	str	r1, [r2, #0]
 8001b92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fa92 f1a2 	rbit	r1, r2
 8001b9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ba0:	6011      	str	r1, [r2, #0]
  return result;
 8001ba2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	fab2 f282 	clz	r2, r2
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f002 021f 	and.w	r2, r2, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1a0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b77      	ldr	r3, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4a76      	ldr	r2, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 81c2 	beq.w	8001f68 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b71      	ldr	r3, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	f000 819c 	beq.w	8001f2a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f040 8114 	bne.w	8001e26 <HAL_RCC_OscConfig+0xcbe>
 8001bfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c16:	601a      	str	r2, [r3, #0]
  return result;
 8001c18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe fffa 	bl	8000c2c <HAL_GetTick>
 8001c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	e009      	b.n	8001c52 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fff5 	bl	8000c2c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e18b      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001c52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c6a:	601a      	str	r2, [r3, #0]
  return result;
 8001c6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_OscConfig+0xb24>
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e01b      	b.n	8001cc4 <HAL_RCC_OscConfig+0xb5c>
 8001c8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fa92 f1a2 	rbit	r1, r2
 8001cd8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cdc:	6011      	str	r1, [r2, #0]
  return result;
 8001cde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f042 0220 	orr.w	r2, r2, #32
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f002 021f 	and.w	r2, r2, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d19e      	bne.n	8001c3e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	4925      	ldr	r1, [pc, #148]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
 8001d1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d34:	601a      	str	r2, [r3, #0]
  return result;
 8001d36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe ff6b 	bl	8000c2c <HAL_GetTick>
 8001d56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5a:	e009      	b.n	8001d70 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe ff66 	bl	8000c2c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0fc      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001d70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d88:	601a      	str	r2, [r3, #0]
  return result;
 8001d8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0xc48>
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <HAL_RCC_OscConfig+0xc44>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e01e      	b.n	8001de8 <HAL_RCC_OscConfig+0xc80>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_OscConfig+0xe0c>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df0:	6011      	str	r1, [r2, #0]
 8001df2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fa92 f1a2 	rbit	r1, r2
 8001dfc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e00:	6011      	str	r1, [r2, #0]
  return result;
 8001e02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d09b      	beq.n	8001d5c <HAL_RCC_OscConfig+0xbf4>
 8001e24:	e0a0      	b.n	8001f68 <HAL_RCC_OscConfig+0xe00>
 8001e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3e:	601a      	str	r2, [r3, #0]
  return result;
 8001e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	461a      	mov	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fee6 	bl	8000c2c <HAL_GetTick>
 8001e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	e009      	b.n	8001e7a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fee1 	bl	8000c2c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e077      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
 8001e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	601a      	str	r2, [r3, #0]
  return result;
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xd4c>
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_OscConfig+0xe0c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e01b      	b.n	8001eec <HAL_RCC_OscConfig+0xd84>
 8001eb4:	f107 0320 	add.w	r3, r7, #32
 8001eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_RCC_OscConfig+0xe0c>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f107 0210 	add.w	r2, r7, #16
 8001ef0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef4:	6011      	str	r1, [r2, #0]
 8001ef6:	f107 0210 	add.w	r2, r7, #16
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	fa92 f1a2 	rbit	r1, r2
 8001f00:	f107 020c 	add.w	r2, r7, #12
 8001f04:	6011      	str	r1, [r2, #0]
  return result;
 8001f06:	f107 020c 	add.w	r2, r7, #12
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f042 0220 	orr.w	r2, r2, #32
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f002 021f 	and.w	r2, r2, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d19e      	bne.n	8001e66 <HAL_RCC_OscConfig+0xcfe>
 8001f28:	e01e      	b.n	8001f68 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e018      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_OscConfig+0xe0c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f40:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000

08001f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09e      	sub	sp, #120	; 0x78
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e162      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b90      	ldr	r3, [pc, #576]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	498b      	ldr	r1, [pc, #556]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e14a      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	497f      	ldr	r1, [pc, #508]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80dc 	beq.w	80021a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d13c      	bne.n	800206e <HAL_RCC_ClockConfig+0xf6>
 8001ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d102      	bne.n	800201e <HAL_RCC_ClockConfig+0xa6>
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e00f      	b.n	800203e <HAL_RCC_ClockConfig+0xc6>
 800201e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002022:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	667b      	str	r3, [r7, #100]	; 0x64
 800202c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002030:	663b      	str	r3, [r7, #96]	; 0x60
 8002032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002042:	65ba      	str	r2, [r7, #88]	; 0x58
 8002044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002046:	fa92 f2a2 	rbit	r2, r2
 800204a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800204c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d17b      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0f3      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d13c      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x178>
 8002076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x128>
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e00f      	b.n	80020c0 <HAL_RCC_ClockConfig+0x148>
 80020a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
 80020ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b2:	643b      	str	r3, [r7, #64]	; 0x40
 80020b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d13a      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b2      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
 80020f0:	2302      	movs	r3, #2
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_RCC_ClockConfig+0x1a0>
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	e00d      	b.n	8002134 <HAL_RCC_ClockConfig+0x1bc>
 8002118:	2302      	movs	r3, #2
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2202      	movs	r2, #2
 8002136:	61ba      	str	r2, [r7, #24]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	617a      	str	r2, [r7, #20]
  return result;
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e079      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	491a      	ldr	r1, [pc, #104]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7fe fd5a 	bl	8000c2c <HAL_GetTick>
 8002178:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe fd56 	bl	8000c2c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e061      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_ClockConfig+0x260>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d214      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4906      	ldr	r1, [pc, #24]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_RCC_ClockConfig+0x25c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e040      	b.n	8002256 <HAL_RCC_ClockConfig+0x2de>
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	491a      	ldr	r1, [pc, #104]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4912      	ldr	r1, [pc, #72]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800221a:	f000 f829 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCC_ClockConfig+0x2e8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002228:	22f0      	movs	r2, #240	; 0xf0
 800222a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	60fa      	str	r2, [r7, #12]
  return result;
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	40d3      	lsrs	r3, r2
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x2ec>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x2f0>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_RCC_ClockConfig+0x2f4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fca8 	bl	8000ba4 <HAL_InitTick>
  
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3778      	adds	r7, #120	; 0x78
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	08003490 	.word	0x08003490
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b08b      	sub	sp, #44	; 0x2c
 8002274:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x30>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x36>
 800229e:	e03c      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a2:	623b      	str	r3, [r7, #32]
      break;
 80022a4:	e03c      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	607a      	str	r2, [r7, #4]
  return result;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	40d3      	lsrs	r3, r2
 80022c4:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	220f      	movs	r2, #15
 80022d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	fa92 f2a2 	rbit	r2, r2
 80022dc:	60fa      	str	r2, [r7, #12]
  return result;
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	40d3      	lsrs	r3, r2
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e004      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_RCC_GetSysClockFreq+0xd0>)
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	623b      	str	r3, [r7, #32]
      break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc4>)
 800231c:	623b      	str	r3, [r7, #32]
      break;
 800231e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002320:	6a3b      	ldr	r3, [r7, #32]
}
 8002322:	4618      	mov	r0, r3
 8002324:	372c      	adds	r7, #44	; 0x2c
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	007a1200 	.word	0x007a1200
 8002338:	080034a0 	.word	0x080034a0
 800233c:	080034b0 	.word	0x080034b0
 8002340:	003d0900 	.word	0x003d0900

08002344 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b092      	sub	sp, #72	; 0x48
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80d0 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002368:	4b86      	ldr	r3, [pc, #536]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10e      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4a82      	ldr	r2, [pc, #520]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	61d3      	str	r3, [r2, #28]
 8002380:	4b80      	ldr	r3, [pc, #512]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239e:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a79      	ldr	r2, [pc, #484]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fc3f 	bl	8000c2c <HAL_GetTick>
 80023ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fc3b 	bl	8000c2c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0db      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d0:	4b6c      	ldr	r3, [pc, #432]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d07d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d076      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023ee:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	4b5e      	ldr	r3, [pc, #376]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	461a      	mov	r2, r3
 8002418:	2301      	movs	r3, #1
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	4b55      	ldr	r3, [pc, #340]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	461a      	mov	r2, r3
 800243c:	2300      	movs	r3, #0
 800243e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002440:	4a50      	ldr	r2, [pc, #320]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d045      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fbec 	bl	8000c2c <HAL_GetTick>
 8002454:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7fe fbe8 	bl	8000c2c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e086      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800246e:	2302      	movs	r3, #2
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	2302      	movs	r3, #2
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	61fb      	str	r3, [r7, #28]
  return result;
 8002486:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d102      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800249c:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	e007      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024a2:	2302      	movs	r3, #2
 80024a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	4b35      	ldr	r3, [pc, #212]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2202      	movs	r2, #2
 80024b4:	613a      	str	r2, [r7, #16]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	fa92 f2a2 	rbit	r2, r2
 80024bc:	60fa      	str	r2, [r7, #12]
  return result;
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0bd      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4926      	ldr	r1, [pc, #152]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f023 0203 	bic.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	491a      	ldr	r1, [pc, #104]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800251c:	4313      	orrs	r3, r2
 800251e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f023 0210 	bic.w	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4912      	ldr	r1, [pc, #72]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253a:	4313      	orrs	r3, r2
 800253c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	490b      	ldr	r1, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002558:	4313      	orrs	r3, r2
 800255a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	4903      	ldr	r1, [pc, #12]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002576:	4313      	orrs	r3, r2
 8002578:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3748      	adds	r7, #72	; 0x48
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	10908100 	.word	0x10908100

08002590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01d      	b.n	80025de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f815 	bl	80025e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 fa62 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e01d      	b.n	8002648 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe f99d 	bl	8000960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f000 fa2d 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2201      	movs	r2, #1
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fdd0 	bl	8003208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_TIM_PWM_Start+0x90>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00e      	beq.n	8002690 <HAL_TIM_PWM_Start+0x40>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_TIM_PWM_Start+0x94>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d009      	beq.n	8002690 <HAL_TIM_PWM_Start+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_TIM_PWM_Start+0x98>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_TIM_PWM_Start+0x40>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_TIM_PWM_Start+0x9c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_TIM_PWM_Start+0x44>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_TIM_PWM_Start+0x46>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_TIM_PWM_Start+0xa0>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d00b      	beq.n	80026d4 <HAL_TIM_PWM_Start+0x84>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d007      	beq.n	80026d4 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800
 80026f0:	00010007 	.word	0x00010007

080026f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800270a:	2302      	movs	r3, #2
 800270c:	e105      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x226>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b14      	cmp	r3, #20
 8002722:	f200 80f0 	bhi.w	8002906 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	08002781 	.word	0x08002781
 8002730:	08002907 	.word	0x08002907
 8002734:	08002907 	.word	0x08002907
 8002738:	08002907 	.word	0x08002907
 800273c:	080027c1 	.word	0x080027c1
 8002740:	08002907 	.word	0x08002907
 8002744:	08002907 	.word	0x08002907
 8002748:	08002907 	.word	0x08002907
 800274c:	08002803 	.word	0x08002803
 8002750:	08002907 	.word	0x08002907
 8002754:	08002907 	.word	0x08002907
 8002758:	08002907 	.word	0x08002907
 800275c:	08002843 	.word	0x08002843
 8002760:	08002907 	.word	0x08002907
 8002764:	08002907 	.word	0x08002907
 8002768:	08002907 	.word	0x08002907
 800276c:	08002885 	.word	0x08002885
 8002770:	08002907 	.word	0x08002907
 8002774:	08002907 	.word	0x08002907
 8002778:	08002907 	.word	0x08002907
 800277c:	080028c5 	.word	0x080028c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f9fe 	bl	8002b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0208 	orr.w	r2, r2, #8
 800279a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6999      	ldr	r1, [r3, #24]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	619a      	str	r2, [r3, #24]
      break;
 80027be:	e0a3      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fa64 	bl	8002c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6999      	ldr	r1, [r3, #24]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	021a      	lsls	r2, r3, #8
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	619a      	str	r2, [r3, #24]
      break;
 8002800:	e082      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fac3 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0208 	orr.w	r2, r2, #8
 800281c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0204 	bic.w	r2, r2, #4
 800282c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69d9      	ldr	r1, [r3, #28]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	61da      	str	r2, [r3, #28]
      break;
 8002840:	e062      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fb21 	bl	8002e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69d9      	ldr	r1, [r3, #28]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	021a      	lsls	r2, r3, #8
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	61da      	str	r2, [r3, #28]
      break;
 8002882:	e041      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fb64 	bl	8002f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0208 	orr.w	r2, r2, #8
 800289e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028c2:	e021      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fba2 	bl	8003014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	021a      	lsls	r2, r3, #8
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002904:	e000      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002906:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop

08002924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIM_ConfigClockSource+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e0a8      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x16a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800295e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d067      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0x124>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d80b      	bhi.n	8002994 <HAL_TIM_ConfigClockSource+0x70>
 800297c:	2b10      	cmp	r3, #16
 800297e:	d073      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x144>
 8002980:	2b10      	cmp	r3, #16
 8002982:	d802      	bhi.n	800298a <HAL_TIM_ConfigClockSource+0x66>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d06f      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002988:	e078      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800298a:	2b20      	cmp	r3, #32
 800298c:	d06c      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x144>
 800298e:	2b30      	cmp	r3, #48	; 0x30
 8002990:	d06a      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002992:	e073      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002994:	2b70      	cmp	r3, #112	; 0x70
 8002996:	d00d      	beq.n	80029b4 <HAL_TIM_ConfigClockSource+0x90>
 8002998:	2b70      	cmp	r3, #112	; 0x70
 800299a:	d804      	bhi.n	80029a6 <HAL_TIM_ConfigClockSource+0x82>
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d033      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xe4>
 80029a0:	2b60      	cmp	r3, #96	; 0x60
 80029a2:	d041      	beq.n	8002a28 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80029a4:	e06a      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029aa:	d066      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x156>
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	d017      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80029b2:	e063      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f000 fc00 	bl	80031c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e04c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f000 fbe9 	bl	80031c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a04:	609a      	str	r2, [r3, #8]
      break;
 8002a06:	e039      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f000 fb5d 	bl	80030d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2150      	movs	r1, #80	; 0x50
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fbb6 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002a26:	e029      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f000 fb7c 	bl	8003132 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2160      	movs	r1, #96	; 0x60
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fba6 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002a46:	e019      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f000 fb3d 	bl	80030d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2140      	movs	r1, #64	; 0x40
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fb96 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002a66:	e009      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 fb8d 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002a78:	e000      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a32      	ldr	r2, [pc, #200]	; (8002b74 <TIM_Base_SetConfig+0xdc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x28>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x28>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <TIM_Base_SetConfig+0xe0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <TIM_Base_SetConfig+0xdc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <TIM_Base_SetConfig+0x6a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d00f      	beq.n	8002b02 <TIM_Base_SetConfig+0x6a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <TIM_Base_SetConfig+0xe0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <TIM_Base_SetConfig+0x6a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <TIM_Base_SetConfig+0xe4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <TIM_Base_SetConfig+0x6a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <TIM_Base_SetConfig+0xe8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d003      	beq.n	8002b02 <TIM_Base_SetConfig+0x6a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <TIM_Base_SetConfig+0xec>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <TIM_Base_SetConfig+0xdc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_Base_SetConfig+0xc0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <TIM_Base_SetConfig+0xe4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0xc0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <TIM_Base_SetConfig+0xe8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0xc0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <TIM_Base_SetConfig+0xec>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d103      	bne.n	8002b60 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	615a      	str	r2, [r3, #20]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40014000 	.word	0x40014000
 8002b80:	40014400 	.word	0x40014400
 8002b84:	40014800 	.word	0x40014800

08002b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 0302 	bic.w	r3, r3, #2
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <TIM_OC1_SetConfig+0xfc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <TIM_OC1_SetConfig+0x78>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <TIM_OC1_SetConfig+0x100>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <TIM_OC1_SetConfig+0x78>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <TIM_OC1_SetConfig+0x104>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC1_SetConfig+0x78>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <TIM_OC1_SetConfig+0x108>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10c      	bne.n	8002c1a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0308 	bic.w	r3, r3, #8
 8002c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <TIM_OC1_SetConfig+0xfc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_OC1_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <TIM_OC1_SetConfig+0x100>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_OC1_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <TIM_OC1_SetConfig+0x104>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC1_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <TIM_OC1_SetConfig+0x108>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	40014800 	.word	0x40014800

08002c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0210 	bic.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0320 	bic.w	r3, r3, #32
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <TIM_OC2_SetConfig+0xf0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10d      	bne.n	8002d14 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <TIM_OC2_SetConfig+0xf0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <TIM_OC2_SetConfig+0xa0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <TIM_OC2_SetConfig+0xf4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_OC2_SetConfig+0xa0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <TIM_OC2_SetConfig+0xf8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_OC2_SetConfig+0xa0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <TIM_OC2_SetConfig+0xfc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d113      	bne.n	8002d5c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d42:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <TIM_OC3_SetConfig+0xec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10d      	bne.n	8002e12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <TIM_OC3_SetConfig+0xec>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <TIM_OC3_SetConfig+0x9e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <TIM_OC3_SetConfig+0xf0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_OC3_SetConfig+0x9e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_OC3_SetConfig+0xf4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_OC3_SetConfig+0x9e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <TIM_OC3_SetConfig+0xf8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d113      	bne.n	8002e5a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800

08002e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	031b      	lsls	r3, r3, #12
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <TIM_OC4_SetConfig+0xb8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00b      	beq.n	8002f0c <TIM_OC4_SetConfig+0x7c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <TIM_OC4_SetConfig+0xbc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_OC4_SetConfig+0x7c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <TIM_OC4_SetConfig+0xc0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_OC4_SetConfig+0x7c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <TIM_OC4_SetConfig+0xc4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d109      	bne.n	8002f20 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40014800 	.word	0x40014800

08002f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <TIM_OC5_SetConfig+0xac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <TIM_OC5_SetConfig+0x72>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <TIM_OC5_SetConfig+0xb0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <TIM_OC5_SetConfig+0x72>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <TIM_OC5_SetConfig+0xb4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <TIM_OC5_SetConfig+0x72>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <TIM_OC5_SetConfig+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d109      	bne.n	8002fde <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40014000 	.word	0x40014000
 800300c:	40014400 	.word	0x40014400
 8003010:	40014800 	.word	0x40014800

08003014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800305a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	051b      	lsls	r3, r3, #20
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <TIM_OC6_SetConfig+0xb0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_OC6_SetConfig+0x74>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <TIM_OC6_SetConfig+0xb4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_OC6_SetConfig+0x74>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <TIM_OC6_SetConfig+0xb8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_OC6_SetConfig+0x74>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <TIM_OC6_SetConfig+0xbc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d109      	bne.n	800309c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40014000 	.word	0x40014000
 80030cc:	40014400 	.word	0x40014400
 80030d0:	40014800 	.word	0x40014800

080030d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0201 	bic.w	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 030a 	bic.w	r3, r3, #10
 8003110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0210 	bic.w	r2, r3, #16
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800315c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800316e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f043 0307 	orr.w	r3, r3, #7
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2201      	movs	r2, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e054      	b.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800329c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a17      	ldr	r2, [pc, #92]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d009      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400
 800332c:	40014000 	.word	0x40014000

08003330 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003348:	2302      	movs	r3, #2
 800334a:	e060      	b.n	800340e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d115      	bne.n	80033fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	051b      	lsls	r3, r3, #20
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40012c00 	.word	0x40012c00

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4e0d      	ldr	r6, [pc, #52]	; (8003458 <__libc_init_array+0x38>)
 8003424:	4c0d      	ldr	r4, [pc, #52]	; (800345c <__libc_init_array+0x3c>)
 8003426:	1ba4      	subs	r4, r4, r6
 8003428:	10a4      	asrs	r4, r4, #2
 800342a:	2500      	movs	r5, #0
 800342c:	42a5      	cmp	r5, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	4e0b      	ldr	r6, [pc, #44]	; (8003460 <__libc_init_array+0x40>)
 8003432:	4c0c      	ldr	r4, [pc, #48]	; (8003464 <__libc_init_array+0x44>)
 8003434:	f000 f820 	bl	8003478 <_init>
 8003438:	1ba4      	subs	r4, r4, r6
 800343a:	10a4      	asrs	r4, r4, #2
 800343c:	2500      	movs	r5, #0
 800343e:	42a5      	cmp	r5, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003448:	4798      	blx	r3
 800344a:	3501      	adds	r5, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003452:	4798      	blx	r3
 8003454:	3501      	adds	r5, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	080034c0 	.word	0x080034c0
 800345c:	080034c0 	.word	0x080034c0
 8003460:	080034c0 	.word	0x080034c0
 8003464:	080034c4 	.word	0x080034c4

08003468 <memset>:
 8003468:	4402      	add	r2, r0
 800346a:	4603      	mov	r3, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	d100      	bne.n	8003472 <memset+0xa>
 8003470:	4770      	bx	lr
 8003472:	f803 1b01 	strb.w	r1, [r3], #1
 8003476:	e7f9      	b.n	800346c <memset+0x4>

08003478 <_init>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

08003484 <_fini>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr
